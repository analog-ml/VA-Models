// *  BSIM-CMG 112.0.0beta4 released on 11/08/2024                            *
// *  BSIM Common Multi-Gate Model (Verilog-A)                                *
// ****************************************************************************

// ****************************************************************************
// *  Copyright Â© 2024 University of California                               *
// *                                                                          *
// *  Project director: Prof. Sayeef Salahuddin                               *
// *                    Prof. Chenming Hu                                     *
// *                                                                          *
// *  Developers: https://www.bsim.berkeley.edu/models/bsimcmg/auth_cmg/      *
// ****************************************************************************

// Both model and instance parameters
`BPRco(l, 3.0e-8, "m", 1.0e-9, inf, "Designed gate length")
`BPRco(dia, 4.0e-8, "m", 1.0e-9, inf, "Diameter of the cylinder (geomod = 3)")
`BPRco(tfin, 1.5e-8, "m", 1.0e-9, inf, "Fin thickness")
`BPRco(fpitch, 8.0e-8, "m", tfin, inf, "Fin pitch")
`BPRoz(nfin, 1.0, "", "Number of fins per finger (real number enables optimization)")
`BPIcc(ngcon, 1, "", 1, 2, "Number of gate contact (1 or 2 sided)")
`BPRcz(aseo, 0.0, "m^2", "Source-to-substrate overlap area through oxide")
`BPRcz(adeo, 0.0, "m^2", "Drain-to-substrate overlap area through oxide")
`BPRcz(pseo, 0.0, "m", "Perimeter of source-to-substrate overlap region through oxide")
`BPRcz(pdeo, 0.0, "m", "Perimeter of drain-to-substrate overlap region through oxide")
`BPRcz(asej, 0.0, "m^2", "Source junction area (bulkmod = 1 or 2)")
`BPRcz(adej, 0.0, "m^2", "Drain junction area (bulkmod = 1 or 2)")
`BPRcz(psej, 0.0, "m", "Source-to-substrate PN junction perimeter (bulkmod = 1 or 2)")
`BPRcz(pdej, 0.0, "m", "Drain-to-substrate PN junction perimeter (bulkmod = 1 or 2)")
`BPRcz(cgsp, 0.0, "F/m", "Constant gate-to-source fringe capacitance (cgeomod = 1)")
`BPRcz(cgdp, 0.0, "F/m", "Constant gate-to-drain fringe capacitance (cgeomod = 1)")
`BPRcz(cdsp, 0.0, "F", "Constant drain-to-source fringe capacitance (all cgeomod)")
`BPRcz(nrs, 0.0, "", "Number of source diffusion squares")
`BPRcz(nrd, 0.0, "", "Number of drain diffusion squares")
`BPRoz(lrsd, l, "m", "Length of the source/drain")
`BPRcz(nfinnom, 0.0, "", "If non-zero, nominal number of fins per finger")
`BPRnb(dtemp, 0.0, "degC", "Variability in device temperature")
`BPRnb(delvtrand, 0.0, "V", "Variability in Vth")
`BPRoz(u0mult, 1.0, "", "Variability in carrier mobility")
`BPRcz(ids0mult, 1.0, "", "Variability in drain current for miscellaneous reasons")
`BPRcz(igc0mult, 1.0, "", "Gate to channel current scale factor")
`BPRcz(igb0mult, 1.0, "", "Gate to body current scale factor")


`BPRcz(covs, 0.0, "F/m", "Constant gate-to-source overlap capacitance (cgeomod = 1)")
`MPRnb(lcovs, 0.0, "F", "l-term of covs")
`MPRnb(ncovs, 0.0, "F/m", "N-term of covs")
`MPRnb(pcovs, 0.0, "F", "P-term of covs")
`MPRnb(wcovs, 0.0, "F", "W-term of covs")
`MPRnb(p2covs, 0.0, "F*m", "WL-term of covs")

`BPRcz(covd, covs, "F/m", "Constant gate-to-drain overlap capacitance (cgeomod = 1)")
`MPRnb(lcovd, lcovs, "F", "l-term of covd")
`MPRnb(ncovd, ncovs, "F/m", "N-term of covd")
`MPRnb(pcovd, pcovs, "F", "P-term of covd")
`MPRnb(wcovd, wcovs, "F", "W-term of covd")
`MPRnb(p2covd, p2covs, "F*m", "WL-term of covd")

//Gate-All-Around FET specific instance/model parameters
`BPRoo(tgaa, 5.0e-9, "m", 0.0, inf, "Thickness of individual GAA bodies")
`BPRoo(tsus, 2.0e-9, "m", 0.0, inf, "Separation between GAA bodies")
`BPRoo(hpff, 5.0e-9, "m", 0.0, inf, "Fin-height of parasitic finFET")
`BPRoo(wgaa, 6.0e-9, "m", 0.0, inf, "GAA body width")
`BPRoc(dws1, 0, "m", -inf, 0.0, "Total width correction for 1st GAA body")
`BPRoc(dach1, 0, "m^2", -inf, 0.0, "Total area correction for 1st GAA body")
`BPRoc(dws2, dws1, "m", -inf, 0.0, "Total width correction for 2nd GAA body")
`BPRoc(dach2, dach1,"m^2", -inf, 0.0, "Total area correction for 2nd GAA body")
`BPRoc(dws3, dws1, "m", -inf, 0.0, "Total width correction for 3rd GAA body")
`BPRoc(dach3, dach1, "m^2", -inf, 0.0, "Total area correction for 3rd GAA body")
`BPRoc(dws4, dws1, "m", -inf, 0.0, "Total width correction for 4th GAA body")
`BPRoc(dach4, dach1, "m^2", -inf, 0.0, "Total area correction for 4th GAA body")
`BPRoc(dws5, dws1, "m", -inf, 0.0, "Total width correction for 5th GAA body")
`BPRoc(dach5, dach1, "m^2", -inf, 0.0, "Total area correction for 5th GAA body")
`BPRoc(dws6, dws1, "m", -inf, 0.0, "Total width correction for 6th GAA body")
`BPRoc(dach6, dach1, "m^2", -inf, 0.0, "Total area correction for 6th GAA body")
`BPIcc(ngaa, 1, "", 0, 6, "Number of GAA bodies per fin")
`BPIcc(subbandmod, 0, "", 0, 1, "Switch for GAAFET quantum subband model (0: off; 1: on)")
`BPIcc(mobscmod, 0, "", 0, 1, "Switch for GAAFET geometry dependent mobility model (0: off; 1: on)")

// Pure instance parameters
`IPIco(nf, 1, "", 1, inf, "Number of fingers")

// Pure model parameters
`MPIty(type, `ntype, "", "1: NMOS; -1: PMOS")
`MPIcc(bulkmod, 0, "", 0, 2, "0: SOI multi-gate; 1: Bulk multi-gate; 2: for decoupled bulk multi-gate")
`MPIcc(geomod, 0, "", 0, 5, "0: Double gate; 1: Triple gate; 2: Quadruple gate; 3: Cylindrical gate; 4: Unified fin Shape; 5: GAAFETs")
`MPIcc(cgeo1sw, 0, "", 0, 1, "For cgeomod = 1 only, this switch enables the parameters covs, covd, cgsp, and cgdp to be in F per fin, per gate-finger, per unit channel width")
`MPIcc(rdsmod, 0, "", 0, 2, "0: Bias-dependent S/D resistances internal and bias-independent S/D resistances external, 1: Both bias-dependent and independent of S/D resistances external, 2: Both bias-dependent and independent of S/D resistances internal")
`MPIcc(asymmod, 0, "", 0, 1, "0: Turn off asymmetry model - forward mode parameters used; 1: Turn on asymmetry model")
`MPIcc(cvmod, 0, "", 0, 1, "0: Consistent I-V & C-V, 1: Decoupled I-V & C-V")
`MPIcc(igcmod, 0, "", 0, 1, "0: Turn off Igc, Igs and Igd; 1: Turn on Igc, Igs and Igd")
`MPIcc(igbmod, 0, "", 0, 1, "0: Turn off Igb; 1: Turn on Igb")
`MPIcc(gidlmod, 0, "", 0, 3, "0: Turn off GIDL/GISL current; 1: Turn on GIDL/GISL current; 2: Turn on GIDL/GISL with parasitic substrate component for geomod = 2 or 3 or 5 and bulkmod != 0; 3: Turn on TAT GIDL/GISL with all features of gidlmod = 2")
`MPIcc(iimod, 0, "", 0, 2, "0: Turn off impact ionization current; 1: BSIM4-based model; 2: BSIMSOI-based model")
`MPIcc(tnoimod, 0, "", 0, 1, "0: Charge-based, 1: Correlated thermal noise model")
`MPIcc(nqsmod, 0, "", 0, 2, "0: Turn off NQS model; 1: NQS gate resistance (with gi node); 2: NQS charge deficit model from BSIM4 (with q node)")
`MPIcc(shmod, 0, "", 0, 1, "0: Turn off self-heating; 1: Turn on self-heating")
`MPIcc(tempmod, 0, "", 0, 1, "1: Change temperature dependence of specific parameters")
`MPIcc(rgatemod, 0, "", 0, 1, "0: Turn off gate electrode resistance (without ge node); 1: Turn on gate electrode resistance (with ge node)")
`MPIcc(rgeomod, 0, "", 0, 1, "Geometry-dependent source/drain resistance; 0: RSH-based; 1: Holistic")
`MPIcc(cgeomod, 0, "", 0, 3, "Geometry-dependent parasitic capacitance model selector")
`MPIcc(fnmod  ,0 ,"" ,0 ,1 ,"0: Old flicker noise model; 1: New flicker noise model")
`MPIcc(cryomod, 0, "", 0, 2, "0: Turn off cryogenic temperature model; 1: Most physical cryogenic temperature models; 2: Cryogenic models converge to BSIM-CMG 111.1.0 temperature models for T > 210 K")
`MPIcc(sh_warn, 0, "", 0, 1, "0: Disable self-heating warnings; 1: Enable self-heating warnings")
`MPIcc(igclamp, 1, "", 0, 1, "0: Disable gate current clamps; 1: Enable gate current clamps")
`MPRnb(ll, 0.0, "m^(lln+1)", "Length reduction parameter (dopant diffusion effect)")
`MPRnb(lln, 1.0, "", "Length reduction parameter (dopant diffusion effect)")
`MPRnb(dlc, 0.0, "m", "Delta l for C-V model")
`MPRnb(dlcacc, 0.0, "m", "Delta l for C-V model in accumulation region (bulkmod = 1 or 2)")
`MPRnb(dwcacc, 0.0, "m", "GAA delta W for C-V model in accumulation region (bulkmod = 1 or 2)")
`MPRnb(llc, 0.0, "m^(lln+1)", "Length reduction parameter (dopant diffusion effect)")
`MPRco(eot, 1.0e-9, "m", 1.0e-10, inf, "Equivalent oxide thickness")
`MPRco(toxp, 1.2e-9, "m", 1.0e-10, inf, "Physical oxide thickness")
`MPRco(eotbox, 1.4e-7, "m", 1.0e-9, inf, "Equivalent oxide thickness of the buried oxide (SOI FinFET)")
`MPRco(hfin, 3.0e-8, "m", 1.0e-9, inf, "Fin height")
`MPRnb(deltaw, 0.0, "m", "Change of effective width due to shape of fin/cylinder")
`MPRnb(deltawcv, 0.0, "m", "CV change of effective width due to shape of fin/cylinder")
`MPRnb(nbodyn1, 0.0, "", "nfin dependence of channel (body) doping")
`MPRex(nbodyn2, 1.0e5, "", 0.0, "nfin dependence of channel (body) doping")
`MPRcc(nsd, 2.0e26, "/m^3", 2.0e25, 1.0e27, "Source/drain active doping concentration")
`MPRnb(phigl, 0.0, "eV/m", "Length dependence of gate workfunction")
`MPRnb(phiglt, 0.0, "/m", "Coupled nfin and length dependence of gate workfunction")
`MPRnb(phign1, 0.0, "", "nfin dependence of gate workfunction")
`MPRex(phign2, 1.0e5, "", 0.0, "nfin dependence of gate workfunction")
`MPRco(epsrox, 3.9, "", 1.0, inf, "Relative dielectric constant of the gate dielectric")
`MPRco(epsrsub, 11.9, "", 1.0, inf, "Relative dielectric constant of the channel material")
`MPRcz(easub, 4.05, "eV", "Electron affinity of substrate")
`MPRoz(ni0sub, 1.1e16, "/m^3", "Intrinsic carrier constant at 300.15K")
`MPRoz(bg0sub, 1.12, "eV", "Bandgap of substrate at 300.15K")
`MPRoz(nc0sub, 2.86e25, "/m^3", "Conduction band density of states")
`MPRoz(imin, 1.0e-15, "A/m^2", "Parameter for Vgs clamping for inversion region calculation in accumulation")

`BPRnb(xl, 0.0, "m", "l offset for channel length due to mask/etch effect")
`MPRnb(lxl, 0.0, "m^2", "l-term of xl")
`MPRnb(nxl, 0.0, "m", "N-term of xl")
`MPRnb(pxl, 0.0, "m^2", "P-term of xl")

`MPRnb(lint, 0.0, "m", "Length reduction parameter (dopant diffusion effect)")
`MPRnb(llint, 0.0, "m^2", "l-term of lint")
`MPRnb(nlint, 0.0, "m", "N-term of lint")
`MPRnb(plint, 0.0, "m^2", "P-term of lint")

`MPRnb(dlbin, 0.0, "m", "Delta l for binning")
`MPRnb(ldlbin, 0.0, "m^2", "l-term of dlbin")
`MPRnb(ndlbin, 0.0, "m", "N-term of dlbin")
`MPRnb(pdlbin, 0.0, "m^2", "P-term of dlbin")

`BPRnb(xw, 0.0, "m", "W offset for GAA channel width due to mask/etch effect")
`MPRnb(lxw, 0.0, "m^2", "l-term of xw")
`MPRnb(nxw, 0.0, "m", "N-term of xw")
`MPRnb(pxw, 0.0, "m^2", "P-term of xw")
`MPRnb(wxw, 0.0, "m^2", "W-term of xw")
`MPRnb(p2xw, 0.0, "m^3", "WL-term of xw")

`MPRnb(dwbin, 0.0, "m", "GAA Delta W for binning")
`MPRnb(ldwbin, 0.0, "m^2", "l-term of dwbin")
`MPRnb(ndwbin, 0.0, "m", "N-term of dwbin")
`MPRnb(pdwbin, 0.0, "m^2", "P-term of dwbin")
`MPRnb(wdwbin, 0.0, "m^2", "W-term of dwbin")
`MPRnb(p2dwbin, 0.0, "m^3", "WL-term of dwbin")

`MPRnb(nbody, 1.0e22, "/m^3", "Channel (body) doping")
`MPRnb(lnbody, 0.0, "/m^2", "l-term of nbody")
`MPRnb(nnbody, 0.0, "/m^3", "N-term of nbody")
`MPRnb(pnbody, 0.0, "/m^2", "P-term of nbody")

`MPRcz(phig, 4.61, "eV", "Gate workfunction")
`MPRnb(lphig, 0.0, "m*eV", "l-term of phig")
`MPRnb(nphig, 0.0, "eV", "N-term of phig")
`MPRnb(pphig, 0.0, "m*eV", "P-term of phig")
`MPRnb(wphig, 0.0, "m*eV", "W-term of phig")
`MPRnb(p2phig, 0.0, "(m^2)*eV", "WL-term of phig")

`MPRnb(ngate, 0.0, "/m^3", "Parameter for poly gate doping. For metal gate please set ngate = 0")
`MPRnb(lngate, 0.0, "/m^2", "l-term of ngate")
`MPRnb(nngate, 0.0, "/m^3", "N-term of ngate")
`MPRnb(pngate, 0.0, "/m^2", "P-term of ngate")
`MPRnb(wngate, 0.0, "/m^2", "W-term of ngate")
`MPRnb(p2ngate, 0.0, "/m", "WL-term of ngate")

// Minimum resistance value
`MPRcz(minr, $simparam("minr", 1m), "Ohm", "minr is the value below which the simulator expects elimination of source/drain resitance and it will improve simulation efficiency without significantly altering the results")

// Short channel effects
`MPRnb(cdscn1, 0.0, "", "nfin dependence of cdsc")
`MPRex(cdscn2, 1.0e5, "", 0.0, "nfin dependence of cdsc")
`MPRnb(cdscdn1, 0.0, "", "nfin dependence of cdscd")
`MPRex(cdscdn2, 1.0e5, "", 0.0, "nfin dependence of cdscd")
`MPRnb(cdscdrn1, cdscdn1, "", "nfin dependence of cdscd")
`MPRex(cdscdrn2, cdscdn2, "", 0.0, "nfin dependence of cdscd")
`MPRnb(eta0n1, 0.0, "", "nfin dependence of eta0")
`MPRco(eta0n2, 1.0e5, "", 1.0e-5, inf, "nfin dependence of eta0")
`MPRnb(eta0lt, 0.0, "/m", "Coupled nfin and length dependence of eta0")
`MPRnb(eta0n1cv, eta0n1, "", "nfin dependence of eta0cv")
`MPRco(eta0n2cv, eta0n2, "", 1.0e-5, inf, "nfin dependence of eta0cv")
`MPRnb(eta0ltcv, eta0lt, "/m", "Coupled nfin and length dependence of eta0cv")
`MPRnb(teta0, 0.0, "/K", "Temperature dependence of DIBL coefficient")
`MPRnb(teta0cv, teta0, "/K", "cvmod = 1 temperature dependence of DIBL coefficient")
`MPRnb(teta0r, teta0, "/K", "Temperature dependence of reverse-mode DIBL coefficient")
`MPRnb(advtp0, 0.0, "", "Pre-exponential coefficient for DITS")
`MPRex(bdvtp0, 1.0e-7, "", 0.0, "Exponential coefficient for DITS")
`MPRnb(advtp1, 0.0, "", "Pre-exponential coefficient for dvtp1")
`MPRex(bdvtp1, 1.0e-7, "", 0.0, "Exponential coefficient for dvtp1")
`MPRnb(dvtp2, 0.0, "", "DITS model parameter")
`MPRnb(thetasce, 0.0, "", "User-designated Vth roll-off length dependence.")
`MPRnb(thetadibl, 0.0, "", "User-designated DIBL length dependence.")
`MPRnb(thetasw, 0.0, "", "User-designated subthreshold swing length dependence.")
`MPRcz(nvtm, 0.0, "V", "If non-zero, subthreshold swing factor multiplied by Vtm.")

`MPRnb(dvtp0, 0.0, "", "Coefficient for drain-induced Vth shift (DITS)")
`MPRnb(ldvtp0, 0.0, "m", "l-term of dvtp0")
`MPRnb(ndvtp0, 0.0, "", "N-term of dvtp0")
`MPRnb(pdvtp0, 0.0, "m", "P-term of dvtp0")
`MPRnb(wdvtp0, 0.0, "m", "W-term of dvtp0")
`MPRnb(p2dvtp0, 0.0, "m^2", "WL-term of dvtp0")

`MPRnb(dvtp1, 0.0, "", "DITS exponent coefficient")
`MPRnb(ldvtp1, 0.0, "m", "l-term of dvtp1")
`MPRnb(ndvtp1, 0.0, "", "N-term of dvtp1")
`MPRnb(pdvtp1, 0.0, "m", "P-term of dvtp1")
`MPRnb(wdvtp1, 0.0, "m", "W-term of dvtp1")
`MPRnb(p2dvtp1, 0.0, "m^2", "WL-term of dvtp1")

`MPRnb(cit, 0.0, "F/m^2", "Parameter for interface traps")
`MPRnb(lcit, 0.0, "F/m", "l-term of cit")
`MPRnb(ncit, 0.0, "F/m^2", "N-term of cit")
`MPRnb(pcit, 0.0, "F/m", "P-term of cit")
`MPRnb(wcit, 0.0, "F/m", "W-term of cit")
`MPRnb(p2cit, 0.0, "F", "WL-term of cit")

`MPRnb(citr, cit, "F/m^2", "Parameter for interface traps in reverse mode for asymmetric model")
`MPRnb(lcitr, lcit, "F/m", "l-term of citr")
`MPRnb(ncitr, ncit, "F/m^2", "N-term of citr")
`MPRnb(pcitr, pcit, "F/m", "P-term of citr")
`MPRnb(wcitr, wcit, "F/m", "W-term of citr")
`MPRnb(p2citr, p2cit, "F", "WL-term of citr")

`MPRnb(cdsc, 7.0e-3, "F/m^2", "Coupling capacitance between S/D and channel")
`MPRnb(lcdsc, 0.0, "F/m", "l-term of cdsc")
`MPRnb(ncdsc, 0.0, "F/m^2", "N-term of cdsc")
`MPRnb(pcdsc, 0.0, "F/m", "P-term of cdsc")
`MPRnb(wcdsc, 0.0, "F/m", "W-term of cdsc")
`MPRnb(p2cdsc, 0.0, "F", "WL-term of cdsc")

`MPRnb(cdscd, 7.0e-3, "F/m^2", "Drain-bias sensitivity of cdsc")
`MPRnb(lcdscd, 0.0, "F/m", "l-term of cdscd")
`MPRnb(ncdscd, 0.0, "F/m^2", "N-term of cdscd")
`MPRnb(pcdscd, 0.0, "F/m", "P-term of cdscd")
`MPRnb(wcdscd, 0.0, "F/m", "W-term of cdscd")
`MPRnb(p2cdscd, 0.0, "F", "WL-term of cdscd")

`MPRnb(cdscdr, cdscd, "F/m^2", "Reverse-mode drain-bias sensitivity of cdsc")
`MPRnb(lcdscdr, lcdscd, "F/m", "l-term of cdscdr")
`MPRnb(ncdscdr, ncdscd, "F/m^2", "N-term of cdscdr")
`MPRnb(pcdscdr, pcdscd, "F/m", "P-term of cdscdr")
`MPRnb(wcdscdr, wcdscd, "F/m", "W-term of cdscdr")
`MPRnb(p2cdscdr, p2cdscd, "F", "WL-term of cdscdr")

`MPRnb(dvt0, 0.0, "", "SCE coefficient")
`MPRnb(ldvt0, 0.0, "m", "l-term of dvt0")
`MPRnb(ndvt0, 0.0, "", "N-term of dvt0")
`MPRnb(pdvt0, 0.0, "m", "P-term of dvt0")
`MPRnb(wdvt0, 0.0, "m", "W-term of dvt0")
`MPRnb(p2dvt0, 0.0, "m^2", "WL-term of dvt0")

`MPRnb(dvt1, 0.6, "", "SCE exponent coefficient. After binning it should be within (0 : inf)")
`MPRnb(ldvt1, 0.0, "m", "l-term of dvt1")
`MPRnb(ndvt1, 0.0, "", "N-term of dvt1")
`MPRnb(pdvt1, 0.0, "m", "P-term of dvt1")
`MPRnb(wdvt1, 0.0, "m", "W-term of dvt1")
`MPRnb(p2dvt1, 0.0, "m^2", "WL-term of dvt1")

`MPRnb(dvt1ss, dvt1, "", "Subthreshold swing exponent coefficient. After binning it should be within (0 : inf)")
`MPRnb(ldvt1ss, ldvt1, "m", "l-term of dvt1ss")
`MPRnb(ndvt1ss, ndvt1, "", "N-term of dvt1ss")
`MPRnb(pdvt1ss, pdvt1, "m", "P-term of dvt1ss")
`MPRnb(wdvt1ss, wdvt1, "m", "W-term of dvt1ss")
`MPRnb(p2dvt1ss, p2dvt1, "m^2", "WL-term of dvt1ss")

`MPRnb(phin, 0.05, "V", "Nonuniform vertical doping effect on surface potential")
`MPRnb(lphin, 0.0, "m*V", "l-term of phin")
`MPRnb(nphin, 0.0, "V", "N-term of phin")
`MPRnb(pphin, 0.0, "m*V", "P-term of phin")
`MPRnb(wphin, 0.0, "m*V", "W-term of phin")
`MPRnb(p2phin, 0.0, "(m^2)*V", "WL-term of phin")

`MPRnb(eta0, 0.6, "", "DIBL coefficient")
`MPRnb(leta0, 0.0, "m", "l-term of eta0")
`MPRnb(neta0, 0.0, "", "N-term of eta0")
`MPRnb(peta0, 0.0, "m", "P-term of eta0")
`MPRnb(weta0, 0.0, "m", "W-term of eta0")
`MPRnb(p2eta0, 0.0, "m^2", "WL-term of eta0")

`MPRnb(eta1, 0.0, "", "DIBL coefficient for low gate overdrive")
`MPRnb(leta1, 0.0, "m", "l-term of eta1")
`MPRnb(neta1, 0.0, "", "N-term of eta1")
`MPRnb(peta1, 0.0, "m", "P-term of eta1")
`MPRnb(weta1, 0.0, "m", "W-term of eta1")
`MPRnb(p2eta1, 0.0, "m^2", "WL-term of eta1")

`MPRnb(eta0r, eta0, "", "Reverse-mode DIBL coefficient")
`MPRnb(leta0r, leta0, "m", "l-term of eta0r")
`MPRnb(neta0r, neta0, "", "N-term of eta0r")
`MPRnb(peta0r, peta0, "m", "P-term of eta0r")
`MPRnb(weta0r, weta0, "m", "W-term of eta0r")
`MPRnb(p2eta0r, p2eta0, "m^2", "WL-term of eta0r")

`MPRnb(eta0cv, eta0, "", "cvmod = 1 DIBL coefficient")
`MPRnb(leta0cv, leta0, "m", "l-term of eta0cv")
`MPRnb(neta0cv, neta0, "", "N-term of eta0cv")
`MPRnb(peta0cv, peta0, "m", "P-term of eta0cv")
`MPRnb(weta0cv, weta0, "m", "W-term of eta0cv")
`MPRnb(p2eta0cv, p2eta0, "m^2", "WL-term of eta0cv")

`MPRnb(dsub, 1.06, "", "DIBL exponent coefficient")
`MPRnb(ldsub, 0.0, "m", "l-term of dsub")
`MPRnb(ndsub, 0.0, "", "N-term of dsub")
`MPRnb(pdsub, 0.0, "m", "P-term of dsub")
`MPRnb(wdsub, 0.0, "m", "W-term of dsub")
`MPRnb(p2dsub, 0.0, "m^2", "WL-term of dsub")

`MPRnb(k1rsce, 0.0, "V^0.5", "k1 for reverse short channel effect calculation")
`MPRnb(lk1rsce, 0.0, "m*V^0.5", "l-term of k1rsce")
`MPRnb(nk1rsce, 0.0, "V^0.5", "N-term of k1rsce")
`MPRnb(pk1rsce, 0.0, "m*V^0.5", "P-term of k1rsce")
`MPRnb(wk1rsce, 0.0, "m*V^0.5", "W-term of k1rsce")
`MPRnb(p2k1rsce, 0.0, "(m^2)*V^0.5", "WL-term of k1rsce")

`MPRnb(lpe0, 5.0e-9, "m", "Equivalent length of pocket region at zero bias")
`MPRnb(llpe0, 0.0, "m^2", "l-term of lpe0")
`MPRnb(nlpe0, 0.0, "m", "N-term of lpe0")
`MPRnb(plpe0, 0.0, "m^2", "P-term of lpe0")
`MPRnb(wlpe0, 0.0, "m^2", "W-term of lpe0")
`MPRnb(p2lpe0, 0.0, "m^3", "WL-term of lpe0")

`MPRnb(dvtshift, 0.0, "V", "Vth shift handle")
`MPRnb(ldvtshift, 0.0, "m*V", "l-term of dvtshift")
`MPRnb(ndvtshift, 0.0, "V", "N-term of dvtshift")
`MPRnb(pdvtshift, 0.0, "m*V", "P-term of dvtshift")
`MPRnb(wdvtshift, 0.0, "m*V", "W-term of dvtshift")
`MPRnb(p2dvtshift, 0.0, "(m^2)*V", "WL-term of dvtshift")

`MPRnb(dvtshiftr, dvtshift, "V", "Vth shift handle for asymmetric mode")
`MPRnb(ldvtshiftr, ldvtshift, "m*V", "l-term of dvtshiftr")
`MPRnb(ndvtshiftr, ndvtshift, "V", "N-term of dvtshiftr")
`MPRnb(pdvtshiftr, pdvtshift, "m*V", "P-term of dvtshiftr")
`MPRnb(wdvtshiftr, wdvtshift, "m*V", "W-term of dvtshiftr")
`MPRnb(p2dvtshiftr, p2dvtshift, "(m^2)*V", "WL-term of dvtshiftr")

// Lateral non-uniform doping effect (Vth shift between I-V and C-V)
`MPRnb(k0, 0.0, "V", "Lateral nud voltage parameter")
`MPRnb(lk0, 0.0, "m*V", "l-term of k0")
`MPRnb(nk0, 0.0, "V", "N-term of k0")
`MPRnb(pk0, 0.0, "m*V", "P-term of k0")
`MPRnb(wk0, 0.0, "m*V", "W-term of k0")
`MPRnb(p2k0, 0.0, "(m^2)*V", "WL-term of k0")

`MPRnb(k01, 0.0, "V/K", "Temperature dependence of lateral nud voltage parameter")
`MPRnb(lk01, 0.0, "(m*V)/K", "l-term of k01")
`MPRnb(nk01, 0.0, "V/K", "N-term of k01")
`MPRnb(pk01, 0.0, "(m*V)/K", "P-term of k01")
`MPRnb(wk01, 0.0, "(m*V)/K", "W-term of k01")
`MPRnb(p2k01, 0.0, "(m^2)*V/K", "WL-term of k01")

`MPRnb(k0si, 1.0, "", "Correction factor for strong inversion used in Mnud. After binning it should be within (0 : inf)")
`MPRnb(lk0si, 0.0, "m", "l-term of k0si")
`MPRnb(nk0si, 0.0, "", "N-term of k0si")
`MPRnb(pk0si, 0.0, "m", "P-term of k0si")
`MPRnb(wk0si, 0.0, "m", "W-term of k0si")
`MPRnb(p2k0si, 0.0, "m^2", "WL-term of k0si")

`MPRnb(k0si1, 0.0, "/K", "Temperature dependence of k0si")
`MPRnb(lk0si1, 0.0, "m/K", "l-term of k0si1")
`MPRnb(nk0si1, 0.0, "/K", "N-term of k0si1")
`MPRnb(pk0si1, 0.0, "m/K", "P-term of k0si1")
`MPRnb(wk0si1, 0.0, "m/K", "W-term of k0si1")
`MPRnb(p2k0si1, 0.0, "m^2/K", "WL-term of k0si1")

`MPRnb(k2si, k0si, "", "Correction factor for strong inversion used in Mob")
`MPRnb(lk2si, lk0si, "m", "l-term of k2si")
`MPRnb(nk2si, nk0si, "", "N-term of k2si")
`MPRnb(pk2si, pk0si, "m", "P-term of k2si")
`MPRnb(wk2si, wk0si, "m", "W-term of k2si")
`MPRnb(p2k2si, p2k0si, "m^2", "WL-term of k2si")

`MPRnb(k2si1, k0si1, "/K", "Temperature dependence of k2si")
`MPRnb(lk2si1, lk0si1, "m/K", "l-term of k2si1")
`MPRnb(nk2si1, nk0si1, "/K", "N-term of k2si1")
`MPRnb(pk2si1, pk0si1, "m/K", "P-term of k2si1")
`MPRnb(wk2si1, wk0si1, "m/K", "W-term of k2si1")
`MPRnb(p2k2si1, p2k0si1, "m^2/K", "WL-term of k2si1")

`MPRnb(k0sisat, 0.0, "", "Correction factor for strong inversion used in Mnud")
`MPRnb(lk0sisat, 0.0, "m", "l-term of k0sisat")
`MPRnb(nk0sisat, 0.0, "", "N-term of k0sisat")
`MPRnb(pk0sisat, 0.0, "m", "P-term of k0sisat")
`MPRnb(wk0sisat, 0.0, "m", "W-term of k0sisat")
`MPRnb(p2k0sisat, 0.0, "m^2", "WL-term of k0sisat")

`MPRnb(k0sisat1, 0.0, "", "Temperature dependence of k0sisat")
`MPRnb(lk0sisat1, 0.0, "m", "l-term of k0sisat1")
`MPRnb(nk0sisat1, 0.0, "", "N-term of k0sisat1")
`MPRnb(pk0sisat1, 0.0, "m", "P-term of k0sisat1")
`MPRnb(wk0sisat1, 0.0, "m", "W-term of k0sisat1")
`MPRnb(p2k0sisat1, 0.0, "m^2", "WL-term of k0sisat1")

`MPRnb(k2sisat, k0sisat, "", "Correction factor for strong inversion used in Mob")
`MPRnb(lk2sisat, lk0sisat, "m", "l-term of k2sisat")
`MPRnb(nk2sisat, nk0sisat, "", "N-term of k2sisat")
`MPRnb(pk2sisat, pk0sisat, "m", "P-term of k2sisat")
`MPRnb(wk2sisat, wk0sisat, "m", "W-term of k2sisat")
`MPRnb(p2k2sisat, p2k0sisat, "m^2", "WL-term of k2sisat")

`MPRnb(k2sisat1, k0sisat1, "", "Temperature dependence of k2sisat")
`MPRnb(lk2sisat1, lk0sisat1, "m", "l-term of k2sisat1")
`MPRnb(nk2sisat1, nk0sisat1, "", "N-term of k2sisat1")
`MPRnb(pk2sisat1, pk0sisat1, "m", "P-term of k2sisat1")
`MPRnb(wk2sisat1, wk0sisat1, "m", "W-term of k2sisat1")
`MPRnb(p2k2sisat1, p2k0sisat1, "m^2", "WL-term of k2sisat1")

// Body effect for bulk substrate
`MPRnb(phibe, 0.7, "V", "Body effect voltage parameter. After binning it should be within [0.2 : 1.2]")
`MPRnb(lphibe, 0.0, "m*V", "l-term of phibe")
`MPRnb(nphibe, 0.0, "V", "N-term of phibe")
`MPRnb(pphibe, 0.0, "m*V", "P-term of phibe")
`MPRnb(wphibe, 0.0, "m*V", "W-term of phibe")
`MPRnb(p2phibe, 0.0, "(m^2)*V", "WL-term of phibe")

`MPRco(k1, 1.0e-6, "V^0.5", 1.0e-6, inf, "Body effect coefficient for subthreshold region")
`MPRnb(lk1, 0.0, "m*V^0.5", "l-term of k1")
`MPRnb(nk1, 0.0, "V^0.5", "N-term of k1")
`MPRnb(pk1, 0.0, "m*V^0.5", "P-term of k1")
`MPRnb(wk1, 0.0, "m*V^0.5", "W-term of k1")
`MPRnb(p2k1, 0.0, "(m^2)*V^0.5", "WL-term of k1")

`MPRnb(k11, 0.0, "V^0.5/K", "Temperature dependence of k1")
`MPRnb(lk11, 0.0, "m*V^0.5/K", "l-term of k11")
`MPRnb(nk11, 0.0, "V^0.5/K", "N-term of k11")
`MPRnb(pk11, 0.0, "m*V^0.5/K", "P-term of k11")
`MPRnb(wk11, 0.0, "m*V^0.5/K", "W-term of k11")
`MPRnb(p2k11, 0.0, "(m^2)*V^0.5/K", "WL-term of k11")

`MPRnb(k2sat, 0.0, "", "Correction factor for k2 in saturation (high Vds)")
`MPRnb(lk2sat, 0.0, "m", "l-term of k2sat")
`MPRnb(nk2sat, 0.0, "", "N-term of k2sat")
`MPRnb(pk2sat, 0.0, "m", "P-term of k2sat")
`MPRnb(wk2sat, 0.0, "m", "W-term of k2sat")
`MPRnb(p2k2sat, 0.0, "m^2", "WL-term of k2sat")

`MPRnb(k2sat1, 0.0, "", "Temperature dependence of k2sat")
`MPRnb(lk2sat1, 0.0, "m", "l-term of k2sat1")
`MPRnb(nk2sat1, 0.0, "", "N-term of k2sat1")
`MPRnb(pk2sat1, 0.0, "m", "P-term of k2sat1")
`MPRnb(wk2sat1, 0.0, "m", "W-term of k2sat1")
`MPRnb(p2k2sat1, 0.0, "m^2", "WL-term of k2sat1")

`MPRnb(k2, 0.0, "", "Body effect coefficient for bulkmod = 2")
`MPRnb(lk2, 0.0, "m", "l-term of k2")
`MPRnb(nk2, 0.0, "", "N-term of k2")
`MPRnb(pk2, 0.0, "m", "P-term of k2")
`MPRnb(wk2, 0.0, "m", "W-term of k2")
`MPRnb(p2k2, 0.0, "m^2", "WL-term of k2")

`MPRnb(k21, 0.0, "", "Temperature dependence of k2")
`MPRnb(lk21, 0.0, "m", "l-term of k21")
`MPRnb(nk21, 0.0, "", "N-term of k21")
`MPRnb(pk21, 0.0, "m", "P-term of k21")
`MPRnb(wk21, 0.0, "m", "W-term of k21")
`MPRnb(p2k21, 0.0, "m^2", "WL-term of k21")

// Quantum mechanical effect
`MPRnb(aqmtcen, 0.0, "", "Parameter for geometric dependence of Tcen on R/tfin/hfin")
`MPRex(bqmtcen, 1.2e-8, "", 0.0, "Parameter for geometric dependence of Tcen on R/tfin/hfin")
`MPRoz(qm0, 1.0e-3, "V", "Knee-point for Tcen in inversion (Charge normalized to Cox)")
`MPRoz(qm0acc, 1.0e-3, "V", "Knee-point for Tcen in accumulation (Charge normalized to Cox)")
`MPRnb(pqmacc, 0.66, "", "Slope of normalized Tcen in accumulation")

`MPRnb(qmfactor, 0.0, "", "Prefactor + switch for QM Vth correction")
`MPRnb(lqmfactor, 0.0, "m", "l-term of qmfactor")
`MPRnb(nqmfactor, 0.0, "", "N-term of qmfactor")
`MPRnb(pqmfactor, 0.0, "m", "P-term of qmfactor")
`MPRnb(wqmfactor, 0.0, "m", "W-term of qmfactor")
`MPRnb(p2qmfactor, 0.0, "m^2", "WL-term of qmfactor")

`MPRnb(qmtcencv, 0.0, "", "Prefactor + switch for QM Width and Toxeff correction for CV")
`MPRnb(lqmtcencv, 0.0, "m", "l-term of qmtcencv")
`MPRnb(nqmtcencv, 0.0, "", "N-term of qmtcencv")
`MPRnb(pqmtcencv, 0.0, "m", "P-term of qmtcencv")
`MPRnb(wqmtcencv, 0.0, "m", "W-term of qmtcencv")
`MPRnb(p2qmtcencv, 0.0, "m^2", "WL-term of qmtcencv")

`MPRnb(qmtcencva, 0.0, "", "Prefactor + switch for QM Width and Toxeff correction for CV (accumulation region)")
`MPRnb(lqmtcencva, 0.0, "m", "l-term of qmtcencva")
`MPRnb(nqmtcencva, 0.0, "", "N-term of qmtcencva")
`MPRnb(pqmtcencva, 0.0, "m", "P-term of qmtcencva")
`MPRnb(wqmtcencva, 0.0, "m", "W-term of qmtcencva")
`MPRnb(p2qmtcencva, 0.0, "m^2", "WL-term of qmtcencva")

`MPRnb(pqm, 0.66, "", "Slope of normalized Tcen in inversion")
`MPRnb(lpqm, 0.0, "m", "l-term of pqm")
`MPRnb(npqm, 0.0, "", "N-term of pqm")
`MPRnb(ppqm, 0.0, "m", "P-term of pqm")
`MPRnb(wpqm, 0.0, "m", "W-term of pqm")
`MPRnb(p2pqm, 0.0, "m^2", "WL-term of pqm")

`MPRnb(pqml, 0.0, "/m", "Length dependence of pqm")

// Velocity saturation model
`MPRnb(vsatn1, 0.0, "", "nfin dependence of vsat")
`MPRex(vsatn2, 1.0e5, "", 0.0, "nfin dependence of vsat")
`MPRnb(avsat, 0.0, "", "Pre-exponential coefficient for vsat")
`MPRex(bvsat, 1.0e-7, "", 0.0, "Exponential coefficient for vsat")
`MPRnb(vsat1n1, vsatn1, "", "nfin dependence of vsat1")
`MPRex(vsat1n2, vsatn2, "", 0.0, "nfin dependence of vsat1")
`MPRnb(vsat1rn1, vsat1n1, "", "nfin dependence of vsat1r")
`MPRex(vsat1rn2, vsat1n2, "", 0.0, "nfin dependence of vsat1r")
`MPRnb(avsat1, avsat, "", "Pre-exponential coefficient for vsat1")
`MPRex(bvsat1, bvsat, "", 0.0, "Exponential coefficient for vsat1")
`MPRnb(apsat, 0.0, "", "Pre-exponential coefficient for psat")
`MPRex(bpsat, 1.0, "", 0.0, "Exponential coefficient for psat")
`MPRnb(avsatcv, avsat, "", "Pre-exponential coefficient for vsatcv")
`MPRex(bvsatcv, bvsat, "", 0.0, "Exponential coefficient for vsatcv")
`MPRnb(apsatcv, apsat, "", "Pre-exponential coefficient for psatcv")
`MPRex(bpsatcv, bpsat, "", 0.0, "Exponential coefficient for psatcv")
`MPRnb(amexp, 0.0, "", "Pre-exponential coefficient for mexp")
`MPRnb(bmexp, 1.0, "", "Exponential coefficient for mexp")
`MPRnb(amexpr, amexp, "", "Pre-exponential coefficient for mexpr")
`MPRnb(bmexpr, bmexp, "", "Exponential coefficient for mexpr")
`MPRnb(aptwg, 0.0, "", "Pre-exponential coefficient for ptwg")
`MPRex(bptwg, 1.0e-7, "", 0.0, "Exponential coefficient for ptwg")
`MPRnb(tmexp, 0.0, "/K", "Temperature coefficient for Vdseff smoothing")
`MPRnb(tmexp2, -4.0e-6, "/K^2", "cryomod != 0 temperature coefficient for Vdseff smoothing")
`MPRnb(tmexpr, tmexp, "/K", "Reverse-mode temperature coefficient for Vdseff smoothing")
`MPRco(dvsatclamp, 0.01, "m", 0.01, inf, "Minimum clamp on Dvsat")

`MPRnb(vsat, 8.5e4, "m/s", "Saturation velocity for the saturation region")
`MPRnb(lvsat, 0.0, "m^2/s", "l-term of vsat")
`MPRnb(nvsat, 0.0, "m/s", "N-term of vsat")
`MPRnb(pvsat, 0.0, "m^2/s", "P-term of vsat")
`MPRnb(wvsat, 0.0, "m^2/s", "W-term of vsat")
`MPRnb(p2vsat, 0.0, "m^3/s", "WL-term of vsat")

`MPRnb(vsatr, vsat, "m/s", "Saturation velocity for the saturation region in the reverse mode")
`MPRnb(lvsatr, lvsat, "m^2/s", "l-term of vsatr")
`MPRnb(nvsatr, nvsat, "m/s", "N-term of vsatr")
`MPRnb(pvsatr, pvsat, "m^2/s", "P-term of vsatr")
`MPRnb(wvsatr, wvsat, "m^2/s", "W-term of vsatr")
`MPRnb(p2vsatr, p2vsat, "m^3/s", "WL-term of vsatr")

`MPRnb(vsat1, vsat, "m/s", "Velocity saturation parameter for Ion degradation - forward mode")
`MPRnb(lvsat1, lvsat, "m^2/s", "l-term of vsat1")
`MPRnb(nvsat1, nvsat, "m/s", "N-term of vsat1")
`MPRnb(pvsat1, pvsat, "m^2/s", "P-term of vsat1")
`MPRnb(wvsat1, wvsat, "m^2/s", "W-term of vsat1")
`MPRnb(p2vsat1, p2vsat, "m^3/s", "WL-term of vsat1")

`MPRnb(vsat1r, vsat1, "m/s", "Velocity saturation parameter for Ion degradation - reverse mode")
`MPRnb(lvsat1r, lvsat1, "m^2/s", "l-term of vsat1r")
`MPRnb(nvsat1r, nvsat1, "m/s", "N-term of vsat1r")
`MPRnb(pvsat1r, pvsat1, "m^2/s", "P-term of vsat1r")
`MPRnb(wvsat1r, wvsat1, "m^2/s", "W-term of vsat1r")
`MPRnb(p2vsat1r, p2vsat1, "m^3/s", "WL-term of vsat1r")

`MPRnb(deltavsat, 1.0, "", "velocity saturation parameter in the linear region")
`MPRnb(ldeltavsat, 0.0, "m", "l-term of deltavsat")
`MPRnb(ndeltavsat, 0.0, "", "N-term of deltavsat")
`MPRnb(pdeltavsat, 0.0, "m", "P-term of deltavsat")
`MPRnb(wdeltavsat, 0.0, "m", "W-term of deltavsat")
`MPRnb(p2deltavsat, 0.0, "m^2", "WL-term of deltavsat")

`MPRnb(psat, 2.0, "", "Velocity saturation exponent, after binning should be from [2.0 : inf)")
`MPRnb(lpsat, 0.0, "m", "l-term of psat")
`MPRnb(npsat, 0.0, "", "N-term of psat")
`MPRnb(ppsat, 0.0, "m", "P-term of psat")
`MPRnb(wpsat, 0.0, "m", "W-term of psat")
`MPRnb(p2psat, 0.0, "m^2", "WL-term of psat")

`MPRnb(ksativ, 1.0, "", "Parameter for long channel Vdsat")
`MPRnb(lksativ, 0.0, "m", "l-term of ksativ")
`MPRnb(nksativ, 0.0, "", "N-term of ksativ")
`MPRnb(pksativ, 0.0, "m", "P-term of ksativ")
`MPRnb(wksativ, 0.0, "m", "W-term of ksativ")
`MPRnb(p2ksativ, 0.0, "m^2", "WL-term of ksativ")
`MPRnb(ksativt1, -2.0e-4, "/K", "cryomod != 0 temperature coefficient for ksativ")
`MPRnb(ksativt2, -2.0e-7, "/K^2", "cryomod != 0 temperature coefficient for ksativ")

`MPRnb(ksativr, ksativ, "", "ksativ in asymmetric mode")
`MPRnb(lksativr, lksativ, "m", "l-term of ksativr")
`MPRnb(nksativr, nksativ, "", "N-term of ksativr")
`MPRnb(pksativr, pksativ, "m", "P-term of ksativr")
`MPRnb(wksativr, wksativ, "m", "W-term of ksativr")
`MPRnb(p2ksativr, p2ksativ, "m^2", "WL-term of ksativr")

`MPRnb(vsatcv, vsat, "m/s", "Velocity saturation parameter for CV")
`MPRnb(lvsatcv, lvsat, "m^2/s", "l-term of vsatcv")
`MPRnb(nvsatcv, nvsat, "m/s", "N-term of vsatcv")
`MPRnb(pvsatcv, pvsat, "m^2/s", "P-term of vsatcv")
`MPRnb(wvsatcv, wvsat, "m^2/s", "W-term of vsatcv")
`MPRnb(p2vsatcv, p2vsat, "m^3/s", "WL-term of vsatcv")

`MPRnb(asat, 1, "", "Velocity saturation fitting parameter for CV")
`MPRnb(lasat, 0, "m", "l-term of asat")
`MPRnb(nasat, 0, "", "N-term of asat")
`MPRnb(pasat, 0, "m", "P-term of asat")
`MPRnb(wasat, 0, "m", "W-term of asat")
`MPRnb(p2asat, 0, "m^2", "WL-term of asat")

`MPRnb(deltavsatcv, deltavsat, "", "Velocity saturation parameter in the linear region for the capacitance model")
`MPRnb(ldeltavsatcv, ldeltavsat, "m", "l-term of deltavsatcv")
`MPRnb(ndeltavsatcv, ndeltavsat, "", "N-term of deltavsatcv")
`MPRnb(pdeltavsatcv, pdeltavsat, "m", "P-term of deltavsatcv")
`MPRnb(wdeltavsatcv, wdeltavsat, "m", "W-term of deltavsatcv")
`MPRnb(p2deltavsatcv, p2deltavsat, "m^2", "WL-term of deltavsatcv")

`MPRnb(psatcv, psat, "", "Velocity saturation exponent for C-V")
`MPRnb(lpsatcv, lpsat, "m", "l-term of psatcv")
`MPRnb(npsatcv, npsat, "", "N-term of psatcv")
`MPRnb(ppsatcv, ppsat, "m", "P-term of psatcv")
`MPRnb(wpsatcv, wpsat, "m", "W-term of psatcv")
`MPRnb(p2psatcv, p2psat, "m^2", "WL-term of psatcv")

`MPRnb(mexp, 4.0, "", "Smoothing function factor for Vdsat")
`MPRnb(lmexp, 0.0, "m", "l-term of mexp")
`MPRnb(nmexp, 0.0, "", "N-term of mexp")
`MPRnb(pmexp, 0.0, "m", "P-term of mexp")
`MPRnb(wmexp, 0.0, "m", "W-term of mexp")
`MPRnb(p2mexp, 0.0, "m^2", "WL-term of mexp")

`MPRnb(mexpr, mexp, "", "Reverse-mode smoothing function factor for Vdsat")
`MPRnb(lmexpr, lmexp, "m", "l-term of mexpr")
`MPRnb(nmexpr, nmexp, "", "N-term of mexpr")
`MPRnb(pmexpr, pmexp, "m", "P-term of mexpr")
`MPRnb(wmexpr, wmexp, "m", "W-term of mexpr")
`MPRnb(p2mexpr, p2mexp, "m^2", "WL-term of mexpr")

`MPRnb(ptwg, 0.0, "/V^2", "Gmsat degradation parameter - forward mode")
`MPRnb(lptwg, 0.0, "m/V^2", "l-term of ptwg")
`MPRnb(nptwg, 0.0, "/V^2", "N-term of ptwg")
`MPRnb(pptwg, 0.0, "m/V^2", "P-term of ptwg")
`MPRnb(wptwg, 0.0, "m/V^2", "W-term of ptwg")
`MPRnb(p2ptwg, 0.0, "m^2/V^2", "WL-term of ptwg")

`MPRnb(ptwgr, ptwg, "/V^2", "Gmsat degradation parameter - reverse mode")
`MPRnb(lptwgr, lptwg, "m/V^2", "l-term of ptwgr")
`MPRnb(nptwgr, nptwg, "/V^2", "N-term of ptwgr")
`MPRnb(pptwgr, pptwg, "m/V^2", "P-term of ptwgr")
`MPRnb(wptwgr, wptwg, "m/V^2", "W-term of ptwgr")
`MPRnb(p2ptwgr, p2ptwg, "m^2/V^2", "WL-term of ptwgr")

`MPRnb(at, -1.56e-3, "/K", "Saturation velocity temperature coefficient")
`MPRnb(lat, 0.0, "m/K", "l-term of at")
`MPRnb(nat, 0.0, "/K", "N-term of at")
`MPRnb(pat, 0.0, "m/K", "P-term of at")
`MPRnb(wat, 0.0, "m/K", "W-term of at")
`MPRnb(p2at, 0.0, "m^2/K", "WL-term of at")
`MPRnb(at2, 2.0e-6, "/K^2", "cryomod != 0 saturation velocity temperature coefficient")

`MPRnb(atr, at, "/K", "Reverse-mode saturation velocity temperature coefficient")
`MPRnb(latr, lat, "m/K", "l-term of atr")
`MPRnb(natr, nat, "/K", "N-term of atr")
`MPRnb(patr, pat, "m/K", "P-term of atr")
`MPRnb(watr, wat, "m/K", "W-term of atr")
`MPRnb(p2atr, p2at, "m^2/K", "WL-term of atr")

`MPRnb(atcv, at, "/K", "Saturation velocity temperature coefficient for CV")
`MPRnb(latcv, lat, "m/K", "l-term of atcv")
`MPRnb(natcv, nat, "/K", "N-term of atcv")
`MPRnb(patcv, pat, "m/K", "P-term of atcv")
`MPRnb(watcv, wat, "m/K", "W-term of atcv")
`MPRnb(p2atcv, p2at, "m^2/K", "WL-term of atcv")
`MPRnb(at2cv, at2, "/K^2", "cryomod != 0 saturation velocity temperature coefficient for CV")

`MPRnb(ptwgt, 4.0e-3, "/K", "ptwg temperature coefficient")
`MPRnb(lptwgt, 0.0, "m/K", "l-term of ptwgt")
`MPRnb(nptwgt, 0.0, "/K", "N-term of ptwgt")
`MPRnb(pptwgt, 0.0, "m/K", "P-term of ptwgt")
`MPRnb(wptwgt, 0.0, "m/K", "W-term of ptwgt")
`MPRnb(p2ptwgt, 0.0, "m^2/K", "WL-term of ptwgt")

// Mobility model
`MPRnb(u0n1, 0.0, "", "nfin dependence of u0")
`MPRnb(u0n1cv, u0n1, "", "cvmod = 1 nfin dependence of u0cv")
`MPRnb(u0n1r, u0n1, "", "Reverse-mode nfin dependence of u0")
`MPRex(u0n2, 1.0e5, "", 0.0, "nfin dependence of u0")
`MPRex(u0n2cv, u0n2, "", 0.0, "cvmod=1 nfin dependence of u0cv")
`MPRex(u0n2r, u0n2, "", 0.0, "Reverse-mode nfin dependence of u0")
`MPRnb(u0lt, 0.0, "/m", "Coupled nfin and length dependence of u0")
`MPRnb(u0ltcv, 0.0, "/m", "Coupled nfin and length dependence of u0cv")
`MPRnb(lpa, 1.0, "", "Mobility l power coefficient")
`MPRnb(lpar, lpa, "", "Reverse-mode mobility l power coefficient")
`MPRnb(aua, 0.0, "", "Pre-exponential coefficient for ua")
`MPRnb(auar, aua, "", "Reverse-mode pre-exponential coefficient for ua")
`MPRex(bua, 1.0e-7, "", 0.0, "Exponential coefficient for ua")
`MPRex(buar, bua, "", 0.0, "Reverse-mode exponential coefficient for uar")
`MPRnb(aeu, 0.0, "", "Pre-exponential coefficient for eu")
`MPRnb(aeur, aeu, "", "Reverse-mode pre-exponential coefficient for eu")
`MPRex(beu, 1.0e-7, "", 0.0, "Exponential coefficient for eu")
`MPRex(beur, beu, "", 0.0, "Reverse-mode exponential coefficient for eu")
`MPRnb(aud, 0.0, "", "Pre-exponential coefficient for ud")
`MPRnb(audr, aud, "", "Reverse-mode pre-exponential coefficient for ud")
`MPRex(bud, 5.0e-8, "", 0.0, "Exponential coefficient for ud")
`MPRex(budr, bud, "", 0.0, "Reverse-mode exponential coefficient for ud")
`MPRcc(chargewf, 0.0, "", -1.0, 1.0, "Average channel charge weighting factor, 1: source-side, 0: middle, -1: drain-side")
`MPRco(dmobclamp, 0.01, "m", 0.01, inf, "Minimum clamp on Dmob")

`MPRnb(u0, 3.0e-2, "m^2/(V*s)", "Low-field mobility")
`MPRnb(lu0, 0.0, "m^3/(V*s)", "l-term of u0")
`MPRnb(nu0, 0.0, "m^2/(V*s)", "N-term of u0")
`MPRnb(pu0, 0.0, "m^3/(V*s)", "P-term of u0")
`MPRnb(wu0, 0.0, "m^3/(V*s)", "W-term of u0")
`MPRnb(p2u0, 0.0, "m^4/(V*s)", "WL-term of u0")

`MPRnb(u0r, u0, "m^2/(V*s)", "Reverse-mode low-field mobility")
`MPRnb(lu0r, lu0, "m^3/(V*s)", "l-term of u0r")
`MPRnb(nu0r, nu0, "m^2/(V*s)", "N-term of u0r")
`MPRnb(pu0r, pu0, "m^3/(V*s)", "P-term of u0r")
`MPRnb(wu0r, wu0, "m^3/(V*s)", "W-term of u0r")
`MPRnb(p2u0r, p2u0, "m^4/(V*s)", "WL-term of u0r")

`MPRnb(u0cv, u0, "m^2/(V*s)", "cvmod = 1 low-field mobility")
`MPRnb(lu0cv, lu0, "m^3/(V*s)", "l-term of u0cv")
`MPRnb(nu0cv, nu0, "m^2/(V*s)", "N-term of u0cv")
`MPRnb(pu0cv, pu0, "m^3/(V*s)", "P-term of u0cv")
`MPRnb(wu0cv, wu0, "m^3/(V*s)", "W-term of u0cv")
`MPRnb(p2u0cv, p2u0, "m^4/(V*s)", "WL-term of u0cv")

`MPRnb(etamob, 2.0, "", "Effective field parameter")
`MPRnb(letamob, 0.0, "m", "l-term of etamob")
`MPRnb(netamob, 0.0, "", "N-term of etamob")
`MPRnb(petamob, 0.0, "m", "P-term of etamob")
`MPRnb(wetamob, 0.0, "m", "W-term of etamob")
`MPRnb(p2etamob, 0.0, "m^2", "WL-term of etamob")

`MPRnb(up, 0.0, "um^lpa", "Mobility l coefficient")
`MPRnb(lup, 0.0, "m*(um^lpa)", "l-term of up")
`MPRnb(nup, 0.0, "um^lpa", "N-term of up")
`MPRnb(pup, 0.0, "m*(um^lpa)", "P-term of up")
`MPRnb(wup, 0.0, "m*(um^lpa)", "W-term of up")
`MPRnb(p2up, 0.0, "(m^2)*(um^lpa)", "WL-term of up")

`MPRnb(upr, up, "um^lpa", "Reverse-mode mobility l coefficient")
`MPRnb(lupr, lup, "m*(um^lpa)", "l-term of upr")
`MPRnb(nupr, nup, "um^lpa", "N-term of upr")
`MPRnb(pupr, pup, "m*(um^lpa)", "P-term of upr")
`MPRnb(wupr, wup, "m*(um^lpa)", "W-term of upr")
`MPRnb(p2upr, p2up, "(m^2)*(um^lpa)", "WL-term of upr")

`MPRnb(ua, 0.3, "(cm/MV)^eu", "Phonon/surface roughness scattering parameter")
`MPRnb(lua, 0.0, "m*(cm/MV)^eu", "l-term of ua")
`MPRnb(nua, 0.0, "(cm/MV)^eu", "N-term of ua")
`MPRnb(pua, 0.0, "m*(cm/MV)^eu", "P-term of ua")
`MPRnb(wua, 0.0, "m*(cm/MV)^eu", "W-term of ua")
`MPRnb(p2ua, 0.0, "(m^2)*(cm/MV)^eu", "WL-term of ua")

`MPRnb(uar, ua, "(cm/MV)^eu", "Reverse-mode phonon/surface roughness scattering parameter")
`MPRnb(luar, lua, "m*(cm/MV)^eu", "l-term of uar")
`MPRnb(nuar, nua, "(cm/MV)^eu", "N-term of uar")
`MPRnb(puar, pua, "m*(cm/MV)^eu", "P-term of uar")
`MPRnb(wuar, wua, "m*(cm/MV)^eu", "W-term of uar")
`MPRnb(p2uar, p2ua, "(m^2)*(cm/MV)^eu", "WL-term of uar")

`MPRnb(uacv, ua, "(cm/MV)^eu", "cvmod = 1 phonon/surface roughness scattering parameter")
`MPRnb(luacv, lua, "m*(cm/MV)^eu", "l-term of uacv")
`MPRnb(nuacv, nua, "(cm/MV)^eu", "N-term of uacv")
`MPRnb(puacv, pua, "m*(cm/MV)^eu", "P-term of uacv")
`MPRnb(wuacv, wua, "m*(cm/MV)^eu", "W-term of uacv")
`MPRnb(p2uacv, p2ua, "(m^2)*(cm/MV)^eu", "WL-term of uacv")

`MPRnb(uc, 0.0, "(1e-6*cm/MV^2)^eu", "Body effect for mobility degradation parameter - bulkmod = 1 or 2")
`MPRnb(luc, 0.0, "m*(1e-6*cm/MV^2)^eu", "l-term of uc")
`MPRnb(nuc, 0.0, "(1e-6*cm/MV^2)^eu", "N-term of uc")
`MPRnb(puc, 0.0, "m*(1e-6*cm/MV^2)^eu", "P-term of uc")
`MPRnb(wuc, 0.0, "m*(1e-6*cm/MV^2)^eu", "W-term of uc")
`MPRnb(p2uc, 0.0, "(m^2)*(1e-6*cm/MV^2)^eu", "WL-term of uc")

`MPRnb(ucr, uc, "(1e-6*cm/MV^2)^eu", "Reverse-mode body effect for mobility degradation parameter - bulkmod = 1 or 2")
`MPRnb(lucr, luc, "m*(1e-6*cm/MV^2)^eu", "l-term of ucr")
`MPRnb(nucr, nuc, "(1e-6*cm/MV^2)^eu", "N-term of ucr")
`MPRnb(pucr, puc, "m*(1e-6*cm/MV^2)^eu", "P-term of ucr")
`MPRnb(wucr, wuc, "m*(1e-6*cm/MV^2)^eu", "W-term of ucr")
`MPRnb(p2ucr, p2uc, "(m^2)*(1e-6*cm/MV^2)^eu", "WL-term of ucr")

`MPRnb(uccv, uc, "(1e-6*cm/MV^2)^eu", "cvmod = 1 body effect for mobility degradation parameter (bulkmod = 1 or 2)")
`MPRnb(luccv, luc, "m*(1e-6*cm/MV^2)^eu", "l-term of uccv")
`MPRnb(nuccv, nuc, "(1e-6*cm/MV^2)^eu", "N-term of uccv")
`MPRnb(puccv, puc, "m*(1e-6*cm/MV^2)^eu", "P-term of uccv")
`MPRnb(wuccv, wuc, "m*(1e-6*cm/MV^2)^eu", "W-term of uccv")
`MPRnb(p2uccv, p2uc, "(m^2)*(1e-6*cm/MV^2)^eu", "WL-term of uccv")

`MPRnb(eu, 2.5, "cm/MV", "Phonon/surface roughness scattering parameter")
`MPRnb(leu, 0.0, "m*(cm/MV)", "l-term of eu")
`MPRnb(neu, 0.0, "cm/MV", "N-term of eu")
`MPRnb(peu, 0.0, "m*(cm/MV)", "P-term of eu")
`MPRnb(weu, 0.0, "m*(cm/MV)", "W-term of eu")
`MPRnb(p2eu, 0.0, "(m^2)*(cm/MV)", "WL-term of eu")

`MPRnb(eur, eu, "cm/MV", "Reverse-mode phonon/surface roughness scattering parameter")
`MPRnb(leur, leu, "m*(cm/MV)", "l-term of eur")
`MPRnb(neur, neu, "cm/MV", "N-term of eur")
`MPRnb(peur, peu, "m*(cm/MV)", "P-term of eur")
`MPRnb(weur, weu, "m*(cm/MV)", "W-term of eur")
`MPRnb(p2eur, p2eu, "(m^2)*(cm/MV)", "WL-term of eur")

`MPRnb(ud, 0.0, "cm/MV", "Coulomb scattering parameter")
`MPRnb(lud, 0.0, "m*(cm/MV)", "l-term of ud")
`MPRnb(nud, 0.0, "cm/MV", "N-term of ud")
`MPRnb(pud, 0.0, "m*(cm/MV)", "P-term of ud")
`MPRnb(wud, 0.0, "m*(cm/MV)", "W-term of ud")
`MPRnb(p2ud, 0.0, "(m^2)*(cm/MV)", "WL-term of ud")

`MPRnb(udr, ud, "cm/MV", "Reverse-mode Coulomb scattering parameter")
`MPRnb(ludr, lud, "m*(cm/MV)", "l-term of udr")
`MPRnb(nudr, nud, "cm/MV", "N-term of udr")
`MPRnb(pudr, pud, "m*(cm/MV)", "P-term of udr")
`MPRnb(wudr, wud, "m*(cm/MV)", "W-term of udr")
`MPRnb(p2udr, p2ud, "(m^2)*(cm/MV)", "WL-term of udr")

`MPRnb(udcv, ud, "cm/MV", "cvmod = 1 coulomb scattering parameter")
`MPRnb(ludcv, lud, "m*(cm/MV)", "l-term of udcv")
`MPRnb(nudcv, nud, "cm/MV", "N-term of udcv")
`MPRnb(pudcv, pud, "m*(cm/MV)", "P-term of udcv")
`MPRnb(wudcv, wud, "m*(cm/MV)", "W-term of udcv")
`MPRnb(p2udcv, p2ud, "(m^2)*(cm/MV)", "WL-term of udcv")

`MPRnb(ucs, 1.0, "", "Coulomb scattering parameter")
`MPRnb(lucs, 0.0, "m", "l-term of ucs")
`MPRnb(nucs, 0.0, "", "N-term of ucs")
`MPRnb(pucs, 0.0, "m", "P-term of ucs")
`MPRnb(wucs, 0.0, "m", "W-term of ucs")
`MPRnb(p2ucs, 0.0, "m^2", "WL-term of ucs")

`MPRnb(uds, 2.0e-5, "", "cryomod != 0 weight factor correction for source side inversion charge density in Coulomb scattering model")
`MPRnb(luds, 0.0, "m", "l-term of uds")
`MPRnb(nuds, 0.0, "", "N-term of uds")
`MPRnb(puds, 0.0, "m", "P-term of uds")
`MPRnb(wuds, 0.0, "m", "W-term of uds")
`MPRnb(p2uds, 0.0, "m^2", "WL-term of uds")

`MPRnb(uds1, -10.0, "", "cryomod != 0 temperature coefficient for uds")
`MPRnb(luds1, 0.0, "m", "l-term of uds1")
`MPRnb(nuds1, 0.0, "", "N-term of uds1")
`MPRnb(puds1, 0.0, "m", "P-term of uds1")
`MPRnb(wuds1, 0.0, "m", "W-term of uds1")
`MPRnb(p2uds1, 0.0, "m^2", "WL-term of uds1")

`MPRnb(udd, -2.0e-5, "", "cryomod != 0 weight factor correction for drain side inversion charge density in Coulomb scattering model")
`MPRnb(ludd, 0.0, "m", "l-term of udd")
`MPRnb(nudd, 0.0, "", "N-term of udd")
`MPRnb(pudd, 0.0, "m", "P-term of udd")
`MPRnb(wudd, 0.0, "m", "W-term of udd")
`MPRnb(p2udd, 0.0, "m^2", "WL-term of udd")

`MPRnb(udd1, -10.0, "", "cryomod != 0 temperature coefficient for udd")
`MPRnb(ludd1, 0.0, "m", "l-term of udd1")
`MPRnb(nudd1, 0.0, "", "N-term of udd1")
`MPRnb(pudd1, 0.0, "m", "P-term of udd1")
`MPRnb(wudd1, 0.0, "m", "W-term of udd1")
`MPRnb(p2udd1, 0.0, "m^2", "WL-term of udd1")

`MPRnb(ute, 0.0, "", "Mobility temperature coefficient")
`MPRnb(lute, 0.0, "m", "l-term of ute")
`MPRnb(nute, 0.0, "", "N-term of ute")
`MPRnb(pute, 0.0, "m", "P-term of ute")
`MPRnb(wute, 0.0, "m", "W-term of ute")
`MPRnb(p2ute, 0.0, "m^2", "WL-term of ute")

`MPRnb(uter, ute, "", "Reverse-mode for mobility temperature coefficient")
`MPRnb(luter, lute, "m", "l-term of uter")
`MPRnb(nuter, nute, "", "N-term of uter")
`MPRnb(puter, pute, "m", "P-term of uter")
`MPRnb(wuter, wute, "m", "W-term of uter")
`MPRnb(p2uter, p2ute, "m^2", "WL-term of uter")

`MPRnb(utecv, ute, "", "cvmod = 1 mobility temperature coefficient")
`MPRnb(lutecv, lute, "m", "l-term of utecv")
`MPRnb(nutecv, nute, "", "N-term of utecv")
`MPRnb(putecv, pute, "m", "P-term of utecv")
`MPRnb(wutecv, wute, "m", "W-term of utecv")
`MPRnb(p2utecv, p2ute, "m^2", "WL-term of utecv")

`MPRnb(ute1, -0.4, "", "cryomod != 0 mobility temperature coefficient")
`MPRnb(lute1, 0.0, "m", "l-term of ute1")
`MPRnb(nute1, 0.0, "", "N-term of ute1")
`MPRnb(pute1, 0.0, "m", "P-term of ute1")
`MPRnb(wute1, 0.0, "m", "W-term of ute1")
`MPRnb(p2ute1, 0.0, "m^2", "WL-term of ute1")

`MPRnb(ute1cv, ute1, "", "cryomod != 0 and cvmod = 1 mobility temperature coefficient")
`MPRnb(lute1cv, lute1, "m", "l-term of ute1cv")
`MPRnb(nute1cv, nute1, "", "N-term of ute1cv")
`MPRnb(pute1cv, pute1, "m", "P-term of ute1cv")
`MPRnb(wute1cv, wute1, "m", "W-term of ute1cv")
`MPRnb(p2ute1cv, p2ute1, "m^2", "WL-term of ute1cv")

`MPRnb(utl, -1.5e-3, "", "Mobility temperature coefficient")
`MPRnb(lutl, 0.0, "m", "l-term of utl")
`MPRnb(nutl, 0.0, "", "N-term of utl")
`MPRnb(putl, 0.0, "m", "P-term of utl")
`MPRnb(wutl, 0.0, "m", "W-term of utl")
`MPRnb(p2utl, 0.0, "m^2", "WL-term of utl")

`MPRnb(utlr, utl, "", "Reverse-mode for mobility temperature coefficient")
`MPRnb(lutlr, lutl, "m", "l-term of utlr")
`MPRnb(nutlr, nutl, "", "N-term of utlr")
`MPRnb(putlr, putl, "m", "P-term of utlr")
`MPRnb(wutlr, wutl, "m", "W-term of utlr")
`MPRnb(p2utlr, p2utl, "m^2", "WL-term of utlr")

`MPRnb(utlcv, utl, "", "cvmod = 1 mobility temperature coefficient")
`MPRnb(lutlcv, lutl, "m", "l-term of utlcv")
`MPRnb(nutlcv, nutl, "", "N-term of utlcv")
`MPRnb(putlcv, putl, "m", "P-term of utlcv")
`MPRnb(wutlcv, wutl, "m", "W-term of utlcv")
`MPRnb(p2utlcv, p2utl, "m^2", "WL-term of utlcv")

`MPRnb(emobt, 0.0, "", "Temperature coefficient of etamob")
`MPRnb(lemobt, 0.0, "m", "l-term of emobt")
`MPRnb(nemobt, 0.0, "", "N-term of emobt")
`MPRnb(pemobt, 0.0, "m", "P-term of emobt")
`MPRnb(wemobt, 0.0, "m", "W-term of emobt")
`MPRnb(p2emobt, 0.0, "m^2", "WL-term of emobt")

`MPRnb(ua1, 1.032e-3, "", "Mobility temperature coefficient for ua")
`MPRnb(lua1, 0.0, "m", "l-term of ua1")
`MPRnb(nua1, 0.0, "", "N-term of ua1")
`MPRnb(pua1, 0.0, "m", "P-term of ua1")
`MPRnb(wua1, 0.0, "m", "W-term of ua1")
`MPRnb(p2ua1, 0.0, "m^2", "WL-term of ua1")

`MPRnb(ua1r, ua1, "", "Reverse-mode mobility temperature coefficient for ua")
`MPRnb(lua1r, lua1, "m", "l-term of ua1r")
`MPRnb(nua1r, nua1, "", "N-term of ua1r")
`MPRnb(pua1r, pua1, "m", "P-term of ua1r")
`MPRnb(wua1r, wua1, "m", "W-term of ua1r")
`MPRnb(p2ua1r, p2ua1, "m^2", "WL-term of ua1r")

`MPRnb(ua1cv, ua1, "", "cvmod = 1 mobility temperature coefficient for ua")
`MPRnb(lua1cv, lua1, "m", "l-term of ua1cv")
`MPRnb(nua1cv, nua1, "", "N-term of ua1cv")
`MPRnb(pua1cv, pua1, "m", "P-term of ua1cv")
`MPRnb(wua1cv, wua1, "m", "W-term of ua1cv")
`MPRnb(p2ua1cv, p2ua1, "m^2", "WL-term of ua1cv")

`MPRnb(ua2, -0.04, "", "cryomod != 0 mobility temperature coefficient for ua")
`MPRnb(lua2, 0.0, "m", "l-term of ua2")
`MPRnb(nua2, 0.0, "", "N-term of ua2")
`MPRnb(pua2, 0.0, "m", "P-term of ua2")
`MPRnb(wua2, 0.0, "m", "W-term of ua2")
`MPRnb(p2ua2, 0.0, "m^2", "WL-term of ua2")

`MPRnb(ua2cv, ua2, "", "cryomod != 0 and cvmod = 1 mobility temperature coefficient for ua")
`MPRnb(lua2cv, lua2, "m", "l-term of ua2cv")
`MPRnb(nua2cv, nua2, "", "N-term of ua2cv")
`MPRnb(pua2cv, pua2, "m", "P-term of ua2cv")
`MPRnb(wua2cv, wua2, "m", "W-term of ua2cv")
`MPRnb(p2ua2cv, p2ua2, "m^2", "WL-term of ua2cv")

`MPRnb(eu1, -1.0e-3, "", "cryomod != 0 mobility temperature coefficient for eu")
`MPRnb(leu1, 0.0, "m", "l-term of eu1")
`MPRnb(neu1, 0.0, "", "N-term of eu1")
`MPRnb(peu1, 0.0, "m", "P-term of eu1")
`MPRnb(weu1, 0.0, "m", "W-term of eu1")
`MPRnb(p2eu1, 0.0, "m^2", "WL-term of eu1")

`MPRnb(uc1, 5.6e-11, "", "Mobility temperature coefficient for uc")
`MPRnb(luc1, 0.0, "m", "l-term of uc1")
`MPRnb(nuc1, 0.0, "", "N-term of uc1")
`MPRnb(puc1, 0.0, "m", "P-term of uc1")
`MPRnb(wuc1, 0.0, "m", "W-term of uc1")
`MPRnb(p2uc1, 0.0, "m^2", "WL-term of uc1")

`MPRnb(uc1r, uc1, "", "Reverse-mode mobility temperature coefficient for uc")
`MPRnb(luc1r, luc1, "m", "l-term of uc1r")
`MPRnb(nuc1r, nuc1, "", "N-term of uc1r")
`MPRnb(puc1r, puc1, "m", "P-term of uc1r")
`MPRnb(wuc1r, wuc1, "m", "W-term of uc1r")
`MPRnb(p2uc1r, p2uc1, "m^2", "WL-term of uc1r")

`MPRnb(uc1cv, uc1, "", "cvmod = 1 mobility temperature coefficient for uc")
`MPRnb(luc1cv, luc1, "m", "l-term of uc1cv")
`MPRnb(nuc1cv, nuc1, "", "N-term of uc1cv")
`MPRnb(puc1cv, puc1, "m", "P-term of uc1cv")
`MPRnb(wuc1cv, wuc1, "m", "W-term of uc1cv")
`MPRnb(p2uc1cv, p2uc1, "m^2", "WL-term of uc1cv")

`MPRnb(ud1, 0.0, "", "Mobility temperature coefficient for ud")
`MPRnb(lud1, 0.0, "m", "l-term of ud1")
`MPRnb(nud1, 0.0, "", "N-term of ud1")
`MPRnb(pud1, 0.0, "m", "P-term of ud1")
`MPRnb(wud1, 0.0, "m", "W-term of ud1")
`MPRnb(p2ud1, 0.0, "m^2", "WL-term of ud1")

`MPRnb(ud1r, ud1, "", "Reverse-mode mobility temperature coefficient for ud")
`MPRnb(lud1r, lud1, "m", "l-term of ud1r")
`MPRnb(nud1r, nud1, "", "N-term of ud1r")
`MPRnb(pud1r, pud1, "m", "P-term of ud1r")
`MPRnb(wud1r, wud1, "m", "W-term of ud1r")
`MPRnb(p2ud1r, p2ud1, "m^2", "WL-term of ud1r")

`MPRnb(ud1cv, ud1, "", "cvmod = 1 mobility temperature coefficient for ud")
`MPRnb(lud1cv, lud1, "m", "l-term of ud1cv")
`MPRnb(nud1cv, nud1, "", "N-term of ud1cv")
`MPRnb(pud1cv, pud1, "m", "P-term of ud1cv")
`MPRnb(wud1cv, wud1, "m", "W-term of ud1cv")
`MPRnb(p2ud1cv, p2ud1, "m^2", "WL-term of ud1cv")

`MPRnb(ud2, -0.04, "", "cryomod != 0 mobility temperature coefficient for ud")
`MPRnb(lud2, 0.0, "m", "l-term of ud2")
`MPRnb(nud2, 0.0, "", "N-term of ud2")
`MPRnb(pud2, 0.0, "m", "P-term of ud2")
`MPRnb(wud2, 0.0, "m", "W-term of ud2")
`MPRnb(p2ud2, 0.0, "m^2", "WL-term of ud2")

`MPRnb(ud2cv, ud2, "", "cryomod != 0 and cvmod = 1 mobility temperature coefficient for ud")
`MPRnb(lud2cv, lud2, "m", "l-term of ud2cv")
`MPRnb(nud2cv, nud2, "", "N-term of ud2cv")
`MPRnb(pud2cv, pud2, "m", "P-term of ud2cv")
`MPRnb(wud2cv, wud2, "m", "W-term of ud2cv")
`MPRnb(p2ud2cv, p2ud2, "m^2", "WL-term of ud2cv")

`MPRnb(ucste, -4.775e-3, "", "Mobility temperature coefficient")
`MPRnb(lucste, 0.0, "m", "l-term of ucste")
`MPRnb(nucste, 0.0, "", "N-term of ucste")
`MPRnb(pucste, 0.0, "m", "P-term of ucste")
`MPRnb(wucste, 0.0, "m", "W-term of ucste")
`MPRnb(p2ucste, 0.0, "m^2", "WL-term of ucste")

`MPRnb(ucste1, -0.04, "", "cryomod != 0 mobility temperature coefficient for ucs")
`MPRnb(lucste1, 0.0, "m", "l-term of ucste1")
`MPRnb(nucste1, 0.0, "", "N-term of ucste1")
`MPRnb(pucste1, 0.0, "m", "P-term of ucste1")
`MPRnb(wucste1, 0.0, "m", "W-term of ucste1")
`MPRnb(p2ucste1, 0.0, "m^2", "WL-term of ucste1")

`MPRco(muhc0, 0.0, "", 0.0, 1.0, "Coefficient for hot-carrier induced mobility degradation")
`MPRco(muhc1, 0.0, "", 0.0, 3.0, "Exponential coefficient for hot-carrier induced mobility degradation")

//Gate-All-Around geometry dependent mobility
`MPRnb(etamobthin, etamob, "", "Effective field parameter for thin GAA bodies")
`MPRcz(etamobtni, 7.5e-9, "m", "Critical tgaa for non-ideality")
`MPRoz(etamobir, 0.1, "nm", "Ideality parameter")

`MPRnb(uathin, ua, "(cm/MV)^eu", "Phonon/surface roughness scattering parameter for thin GAA bodies")
`MPRcz(uatsat, 9e-9, "m", "Critical tgaa for ua saturation")
`MPRcz(uartsc, 0.09, "1/nm", "Rate of ua decay with tgaa scaling")
`MPRcz(uatni, 6.4e-9, "m", "Critical tgaa for non-ideality")
`MPRoz(uair, 0.2, "nm", "Ideality parameter")

`MPRnb(euthin, eu, "cm/MV", "Phonon/surface roughness scattering parameter for thin GAA bodies")
`MPRcz(euptsc, 3.5, "", "Exponent for tgaa scaling power law")
`MPRcz(eutni, 6e-9, "m", "Critical tgaa for non-ideality")
`MPRoz(euir, 0.2, "nm", "Ideality parameter")

`MPRnb(udthin, ud, "cm/MV", "Coulomb scattering parameter for thin GAA bodies")
`MPRcz(udtsat, 8.1e-9, "m", "Crtitcal tgaa for ud saturation")
`MPRcz(udptsc, 1.3, "", "Exponent for ud power law")

`MPRcz(u0etawsc, 1.5, "", "Ratio of primary carrier low-field mobilities: U0_[110]/U0_[100]")
`MPRcz(egbulk, 1.1, "eV", "Bulk band-gap")
`MPRcz(u0emsm1, 26.6, "meVnm^2", "Parameter for effective mass scaling")
`MPRnb(u0emsm2, 4, "", "Parameter for effective mass scaling")

// Access resistance model
`MPRcz(rdswmin, 0.0, "ohm*(um^(wr))", "rdsmod = 0 S/D extension resistance per unit width at high Vgs")
`MPRnb(ardsw, 0.0, "", "Pre-exponential coefficient for rdsw")
`MPRex(brdsw, 1.0e-7, "", 0.0, "exponential coefficient for rdsw")
`MPRcz(rswmin, 0.0, "ohm*(um^(wr))", "rdsmod = 1 source extension resistance per unit width at high Vgs")
`MPRnb(arsw, 0.0, "", "Pre-exponential coefficient for rsw")
`MPRex(brsw, 1.0e-7, "", 0.0, "Exponential coefficient for rsw")
`MPRcz(rdwmin, 0.0, "ohm*(um^(wr))", "rdsmod = 1 drain extension resistance per unit width at high Vgs")
`MPRnb(ardw, 0.0, "", "Pre-exponential coefficient for rdw")
`MPRex(brdw, 1.0e-7, "", 0.0, "Exponential coefficient for rdw")
`MPRcz(rsdr, 0.0, "V^(-prsdr)", "Source-side drift resistance parameter - forward mode")
`MPRcz(rsdrr, rsdr, "V^(-prsdr)", "Source-side drift resistance parameter - reverse mode")
`MPRcz(rddr, rsdr, "V^(-prddr)", "Drain-side drift resistance parameter - forward mode")
`MPRcz(rddrr, rddr, "V^(-prddr)", "Drain-side drift resistance parameter - reverse mode")
`MPRnb(prsdr, 1.0, "", "Source-side quasi-saturation parameter")
`MPRnb(prddr, prsdr, "", "Drain-side quasi-saturation parameter")
`MPRnb(trsdr, 0.0, "/K", "Source-side drift resistance temperature coefficient")
`MPRnb(trddr, trsdr, "/K", "Drain-side drift resistance temperature coefficient")

`MPRnb(rdsw, 1.0e2, "(ohm-um^wr)", "rdsmod = 0 zero bias S/D extension resistance per unit width")
`MPRnb(lrdsw, 0.0, "m*(ohm-um^wr)", "l-term of rdsw")
`MPRnb(nrdsw, 0.0, "(ohm-um^wr)", "N-term of rdsw")
`MPRnb(prdsw, 0.0, "m*(ohm-um^wr)", "P-term of rdsw")
`MPRnb(wrdsw, 0.0, "m*(ohm-um^wr)", "W-term of rdsw")
`MPRnb(p2rdsw, 0.0, "(m^2)*(ohm-um^wr)", "WL-term of rdsw")

`MPRnb(rsw, 5.0e1, "(ohm-um^wr)", "rdsmod = 1 zero bias source extension resistance per unit width")
`MPRnb(lrsw, 0.0, "m*(ohm-um^wr)", "l-term of rsw")
`MPRnb(nrsw, 0.0, "(ohm-um^wr)", "N-term of rsw")
`MPRnb(prsw, 0.0, "m*(ohm-um^wr)", "P-term of rsw")
`MPRnb(wrsw, 0.0, "m*(ohm-um^wr)", "W-term of rsw")
`MPRnb(p2rsw, 0.0, "(m^2)*(ohm-um^wr)", "WL-term of rsw")

`MPRnb(rdw, 5.0e1, "(ohm-um^wr)", "rdsmod = 1 zero bias drain extension resistance per unit width")
`MPRnb(lrdw, 0.0, "m*(ohm-um^wr)", "l-term of rdw")
`MPRnb(nrdw, 0.0, "(ohm-um^wr)", "N-term of rdw")
`MPRnb(prdw, 0.0, "m*(ohm-um^wr)", "P-term of rdw")
`MPRnb(wrdw, 0.0, "m*(ohm-um^wr)", "W-term of rdw")
`MPRnb(p2rdw, 0.0, "(m^2)*(ohm-um^wr)", "WL-term of rdw")

`MPRnb(prwgs, 0.0, "/V", "Gate bias dependence of source extension resistance")
`MPRnb(lprwgs, 0.0, "m/V", "l-term of prwgs")
`MPRnb(nprwgs, 0.0, "/V", "N-term of prwgs")
`MPRnb(pprwgs, 0.0, "m/V", "P-term of prwgs")
`MPRnb(wprwgs, 0.0, "m/V", "W-term of prwgs")
`MPRnb(p2prwgs, 0.0, "(m^2)/V", "WL-term of prwgs")

`MPRnb(prwgd, prwgs, "/V", "Gate bias dependence of drain extension resistance")
`MPRnb(lprwgd, 0.0, "m/V", "l-term of prwgd")
`MPRnb(nprwgd, 0.0, "/V", "N-term of prwgd")
`MPRnb(pprwgd, 0.0, "m/V", "P-term of prwgd")
`MPRnb(wprwgd, 0.0, "m/V", "W-term of prwgd")
`MPRnb(p2prwgd, 0.0, "(m^2)/V", "WL-term of prwgd")

`MPRnb(wr, 1.0, "", "W dependence parameter of S/D extension resistance")
`MPRnb(lwr, 0.0, "m", "l-term of wr")
`MPRnb(nwr, 0.0, "", "N-term of wr")
`MPRnb(pwr, 0.0, "m", "P-term of wr")
`MPRnb(wwr, 0.0, "m", "W-term of wr")
`MPRnb(p2wr, 0.0, "m^2", "WL-term of wr")

`MPRnb(prt, 1.0e-3, "/K", "Series resistance temperature coefficient")
`MPRnb(lprt, 0.0, "m/K", "l-term of prt")
`MPRnb(nprt, 0.0, "/K", "N-term of prt")
`MPRnb(pprt, 0.0, "m/K", "P-term of prt")
`MPRnb(wprt, 0.0, "m/K", "W-term of prt")
`MPRnb(p2prt, 0.0, "(m^2)/K", "WL-term of prt")

`MPRnb(prt1, 4.0e-4, "/K", "cryomod != 0 series resistance temperature coefficient at low temperatures")
`MPRnb(lprt1, 0.0, "m/K", "l-term of prt1")
`MPRnb(nprt1, 0.0, "/K", "N-term of prt1")
`MPRnb(pprt1, 0.0, "m/K", "P-term of prt1")
`MPRnb(wprt1, 0.0, "m/K", "W-term of prt1")
`MPRnb(p2prt1, 0.0, "(m^2)/K", "WL-term of prt1")

`MPRnb(tr0, 170.0, "K", "cryomod != 0 corner temperature in dual-slope temperature model of series resistance")
`MPRnb(ltr0, 0.0, "m*K", "l-term of tr0")
`MPRnb(ntr0, 0.0, "K", "N-term of tr0")
`MPRnb(ptr0, 0.0, "m*K", "P-term of tr0")
`MPRnb(wtr0, 0.0, "m*K", "W-term of tr0")
`MPRnb(p2tr0, 0.0, "(m^2)*K", "WL-term of tr0")

`MPRcz(sprt, 1.0e-2, "", "cryomod != 0 parameter for corner temperature smoothing in dual-slope temperature model of series resistance")
`MPRnb(lsprt, 0.0, "m", "l-term of sprt")
`MPRnb(nsprt, 0.0, "", "N-term of sprt")
`MPRnb(psprt, 0.0, "m", "P-term of sprt")
`MPRnb(wsprt, 0.0, "m", "W-term of sprt")
`MPRnb(p2sprt, 0.0, "m^2", "WL-term of sprt")

// DIBL model
`MPRnb(pdibl1, 1.3, "", "DIBL output conductance parameter - forward mode")
`MPRnb(lpdibl1, 0.0, "m", "l-term of pdibl1")
`MPRnb(npdibl1, 0.0, "", "N-term of pdibl1")
`MPRnb(ppdibl1, 0.0, "m", "P-term of pdibl1")
`MPRnb(wpdibl1, 0.0, "m", "W-term of pdibl1")
`MPRnb(p2pdibl1, 0.0, "m^2", "WL-term of pdibl1")

`MPRnb(pdibl2, 2.0e-4, "", "DIBL output conductance parameter")
`MPRnb(lpdibl2, 0.0, "m", "l-term of pdibl2")
`MPRnb(npdibl2, 0.0, "", "N-term of pdibl2")
`MPRnb(ppdibl2, 0.0, "m", "P-term of pdibl2")
`MPRnb(wpdibl2, 0.0, "m", "W-term of pdibl2")
`MPRnb(p2pdibl2, 0.0, "m^2", "WL-term of pdibl2")

`MPRnb(pdibl1r, pdibl1, "", "DIBL output conductance parameter - reverse mode")
`MPRnb(lpdibl1r, lpdibl1, "m", "l-term of pdibl1r")
`MPRnb(npdibl1r, npdibl1, "", "N-term of pdibl1r")
`MPRnb(ppdibl1r, ppdibl1, "m", "P-term of pdibl1r")
`MPRnb(wpdibl1r, wpdibl1, "m", "W-term of pdibl1r")
`MPRnb(p2pdibl1r, p2pdibl1, "m^2", "WL-term of pdibl1r")

`MPRnb(pdibl2r, pdibl2, "", "DIBL output conductance parameter - reverse mode")
`MPRnb(lpdibl2r, lpdibl2, "m", "l-term of pdibl2r")
`MPRnb(npdibl2r, npdibl2, "", "N-term of pdibl2r")
`MPRnb(ppdibl2r, ppdibl2, "m", "P-term of pdibl2r")
`MPRnb(wpdibl2r, wpdibl2, "m", "W-term of pdibl2r")
`MPRnb(p2pdibl2r, p2pdibl2, "m^2", "WL-term of pdibl2r")

`MPRnb(drout, 1.06, "", "l dependence of DIBL effect on Rout")
`MPRnb(ldrout, 0.0, "m", "l-term of drout")
`MPRnb(ndrout, 0.0, "", "N-term of drout")
`MPRnb(pdrout, 0.0, "m", "P-term of drout")
`MPRnb(wdrout, 0.0, "m", "W-term of drout")
`MPRnb(p2drout, 0.0, "m^2", "WL-term of drout")

`MPRnb(pvag, 1.0, "", "Vgs dependence on early voltage")
`MPRnb(lpvag, 0.0, "m", "l-term of pvag")
`MPRnb(npvag, 0.0, "", "N-term of pvag")
`MPRnb(ppvag, 0.0, "m", "P-term of pvag")
`MPRnb(wpvag, 0.0, "m", "W-term of pvag")
`MPRnb(p2pvag, 0.0, "m^2", "WL-term of pvag")

// Channel length modulation effect
`MPRnb(apclm, 0.0, "", "Pre-exponential coefficient for pclm")
`MPRnb(apclmr, apclm, "", "Reverse-mode pre-exponential coefficient for pclm")
`MPRex(bpclm, 1.0e-7, "", 0.0, "Exponential coefficient for pclm")
`MPRex(bpclmr, bpclm, "", 0.0, "Reverse-mode exponential coefficient for pclm")

`MPRnb(pclm, 1.3e-2, "", "Channel length modulation (CLM) parameter")
`MPRnb(pclmt, -2.0e-5, "/K", "cryomod != 0 temperature coefficient for pclm")
`MPRnb(lpclm, 0.0, "m", "l-term of pclm")
`MPRnb(npclm, 0.0, "", "N-term of pclm")
`MPRnb(ppclm, 0.0, "m", "P-term of pclm")
`MPRnb(wpclm, 0.0, "m", "W-term of pclm")
`MPRnb(p2pclm, 0.0, "m^2", "WL-term of pclm")

`MPRnb(pclmr, pclm, "", "Reverse model pclm parameter")
`MPRnb(lpclmr, lpclm, "m", "l-term of pclmr")
`MPRnb(npclmr, npclm, "", "N-term of pclmr")
`MPRnb(ppclmr, ppclm, "m", "P-term of pclmr")
`MPRnb(wpclmr, wpclm, "m", "W-term of pclmr")
`MPRnb(p2pclmr, p2pclm, "m^2", "WL-term of pclmr")

`MPRnb(pclmg, 0.0, "/V", "Gate bias dependence parameter for CLM")
`MPRnb(lpclmg, 0.0, "m/V", "l-term of pclmg")
`MPRnb(npclmg, 0.0, "/V", "N-term of pclmg")
`MPRnb(ppclmg, 0.0, "m/V", "P-term of pclmg")
`MPRnb(wpclmg, 0.0, "m/V", "W-term of pclmg")
`MPRnb(p2pclmg, 0.0, "(m^2)/V", "WL-term of pclmg")

`MPRnb(pclmcv, pclm, "", "CLM parameter for short-channel CV")
`MPRnb(lpclmcv, lpclm, "m", "l-term of pclmcv")
`MPRnb(npclmcv, npclm, "", "N-term of pclmcv")
`MPRnb(ppclmcv, ppclm, "m", "P-term of pclmcv")
`MPRnb(wpclmcv, wpclm, "m", "W-term of pclmcv")
`MPRnb(p2pclmcv, p2pclm, "m^2", "WL-term of pclmcv")

// Non-saturation effect
`MPRnb(a1, 0.0, "/V^2", "Non-saturation effect parameter for strong inversion Region")
`MPRnb(la1, 0.0, "m/V^2", "l-term of a1")
`MPRnb(na1, 0.0, "/V^2", "N-term of a1")
`MPRnb(pa1, 0.0, "m/V^2", "P-term of a1")
`MPRnb(wa1, 0.0, "m/V^2", "W-term of a1")
`MPRnb(p2a1, 0.0, "(m^2)/V^2", "WL-term of a1")

`MPRnb(a11, 0.0, "/(V^2*K)", "Temperature dependence of a1")
`MPRnb(la11, 0.0, "m/(V^2*K)", "l-term of a11")
`MPRnb(na11, 0.0, "/(V^2*K)", "N-term of a11")
`MPRnb(pa11, 0.0, "m/(V^2*K)", "P-term of a11")
`MPRnb(wa11, 0.0, "m/(V^2*K)", "W-term of a11")
`MPRnb(p2a11, 0.0, "(m^2)/(V^2*K)", "WL-term of a11")

`MPRnb(a2, 0.0, "/V", "Non-saturation effect parameter for moderate Inversion Region")
`MPRnb(la2, 0.0, "m/V", "l-term of a2")
`MPRnb(na2, 0.0, "/V", "N-term of a2")
`MPRnb(pa2, 0.0, "m/V", "P-term of a2")
`MPRnb(wa2, 0.0, "m/V", "W-term of a2")
`MPRnb(p2a2, 0.0, "(m^2)/V", "WL-term of a2")

`MPRnb(a21, 0.0, "/(V*K)", "Temperature dependence of a2")
`MPRnb(la21, 0.0, "m/(V*K)", "l-term of a21")
`MPRnb(na21, 0.0, "/(V*K)", "N-term of a21")
`MPRnb(pa21, 0.0, "m/(V*K)", "P-term of a21")
`MPRnb(wa21, 0.0, "m/(V*K)", "W-term of a21")
`MPRnb(p2a21, 0.0, "(m^2)/(V*K)", "WL-term of a21")

// Gate electrode resistance
`MPRcz(rgext, 0.0, "ohm", "Effective gate electrode external resistance")
`MPRco(rgfin, 1.0e-3, "ohm", 1.0e-3, inf, "Effective gate electrode per finger per fin resistance")

// Geometry-dependent source/drain resistance of rgeomod = 0
`MPRnb(rshs, 0.0, "ohm", "Source-side sheet resistance")
`MPRnb(rshd, rshs, "ohm", "Drain-side sheet resistance")

// Geometry-dependent source/drain resistance of rgeomod = 1
`MPRnb(hepi, 1.0e-8, "m", "Height of the raised source/drain on top of the fin")
`MPRnb(tsili, 1.0e-8, "m", "Thickness of the silicide on top of the raised source/drain")
`MPRcc(rhoc, 1.0e-12, "ohm*(m^2)", 1.0e-18, 1.0e-9, "Contact resistivity at the silicon/silicide interface")
`MPRoz(rhorsd, 1.0, "ohm*(m)", "If non-zero, average resistivity of silicon in the raised source/drain region")
`MPRcc(cratio, 0.5, "", 0.0, 1.0, "Ratio of the corner area filled with silicon to the total corner area")
`MPRoo(deltaprsd, 0.0, "m", -fpitch, inf, "Change in silicon/silicide interface length due to non-rectangular epi")
`MPIcc(sdterm, 0, "", 0, 1, "Indicator of whether the source/drain are terminated with silicide")
`MPRoz(lsp, 6.0e-9, "m", "Thickness of the gate sidewall spacer")
`MPRco(epsrsp, 3.9, "", 1.0, inf, "Relative dielectric constant of the spacer")
`MPRoz(tgate, 3.0e-8, "m", "Gate height on top of the hard mask")
`MPRcz(tmask, 3.0e-8, "m", "Height of hard mask on top of the fin")
`MPRcz(asiliend, 0.0, "m^2", "Extra silicide cross sectional area at the two ends of the FinFET")
`MPRcz(arsdend, 0.0, "m^2", "Extra raised source/drain cross sectional areaat the two ends of the finFET")
`MPRcz(prsdend, 0.0, "m", "Extra silicon/silicide interface perimeter at the two ends of the finFET")
`MPRnb(rgeoa, 1.0, "", "Fitting parameter for rgeomod = 1")
`MPRnb(rgeob, 0.0, "/m", "Fitting parameter for rgeomod = 1")
`MPRnb(rgeoc, 0.0, "/m", "Fitting parameter for rgeomod = 1")
`MPRnb(rgeod, 0.0, "/m", "Fitting parameter for rgeomod = 1")
`MPRnb(rgeoe, 0.0, "/m", "Fitting parameter for rgeomod = 1")
`MPRnb(cgeoa, 1.0, "", "Fitting parameter for cgeomod = 2 and 3")
`MPRnb(cgeob, 0.0, "/m", "Fitting parameter for cgeomod = 2 and 3")
`MPRnb(cgeoc, 0.0, "/m", "Fitting parameter for cgeomod = 2 and 3")
`MPRnb(cgeod, 0.0, "/m", "Fitting parameter for cgeomod = 2 and 3")
`MPRcz(cgeoe, 1.0, "", "Fitting parameter for cgeomod = 2 and 3")

// Gate currents
`MPRnb(dlcigs, 0.0, "m", "Delta l for Igs model")
`MPRnb(dlcigd, dlcigs, "m", "Delta l for Igd model")
`MPRnb(vfbsd, 0.0, "V", "User-designated flatband voltage for S/D region")
`MPRnb(vfbsdcv, vfbsd, "V", "User-designated flatband voltage for S/D region for C-V calculations")
`MPRoz(toxref, 1.2e-9, "m", "Target tox value")
`MPRco(toxg, toxp, "m", 1.0e-10, inf, "Oxide thickness for gate current model")
`MPRoz(igbinvclamp, 1.0e-3, "", "Clamping value of the exponent for Igb in inversion")
`MPRoz(igbaccclamp, 1.0e-3, "", "Clamping value of the exponent for Igb in accumulation")
`MPRoz(igcinvclamp, 5.0e-4, "", "Clamping value of the exponent for Igc in inversion")

`MPRnb(ntox, 1.0, "", "Exponent for Tox ratio")
`MPRnb(lntox, 0.0, "m", "l-term of ntox")
`MPRnb(nntox, 0.0, "", "N-term of ntox")
`MPRnb(pntox, 0.0, "m", "P-term of ntox")
`MPRnb(wntox, 0.0, "m", "W-term of ntox")
`MPRnb(p2ntox, 0.0, "m^2", "WL-term of ntox")

`MPRnb(aigbinv, 1.11e-2, "(F*s^2/g)^0.5/m", "Parameter for Igb in inversion")
`MPRnb(laigbinv, 0.0, "(F*s^2/g)^0.5", "l-term of aigbinv")
`MPRnb(naigbinv, 0.0, "(F*s^2/g)^0.5/m", "N-term of aigbinv")
`MPRnb(paigbinv, 0.0, "(F*s^2/g)^0.5", "P-term of aigbinv")
`MPRnb(waigbinv, 0.0, "(F*s^2/g)^0.5", "W-term of aigbinv")
`MPRnb(p2aigbinv, 0.0, "m*(F*s^2/g)^0.5", "WL-term of aigbinv")

`MPRnb(aigbinv1, 0.0, "(F*s^2/g)^0.5/(m*K)", "Parameter for Igb in inversion")
`MPRnb(laigbinv1, 0.0, "(F*s^2/g)^0.5/K", "l-term of aigbinv1")
`MPRnb(naigbinv1, 0.0, "(F*s^2/g)^0.5/(m*K)", "N-term of aigbinv1")
`MPRnb(paigbinv1, 0.0, "(F*s^2/g)^0.5/K", "P-term of aigbinv1")
`MPRnb(waigbinv1, 0.0, "(F*s^2/g)^0.5/K", "W-term of aigbinv1")
`MPRnb(p2aigbinv1, 0.0, "m*(F*s^2/g)^0.5/K", "WL-term of aigbinv1")

`MPRnb(bigbinv, 9.49e-4, "(F*s^2/g)^0.5/(m*V)", "Parameter for Igb in inversion")
`MPRnb(lbigbinv, 0.0, "(F*s^2/g)^0.5/V", "l-term of bigbinv")
`MPRnb(nbigbinv, 0.0, "(F*s^2/g)^0.5/(m*V)", "N-term of bigbinv")
`MPRnb(pbigbinv, 0.0, "(F*s^2/g)^0.5/V", "P-term of bigbinv")
`MPRnb(wbigbinv, 0.0, "(F*s^2/g)^0.5/V", "W-term of bigbinv")
`MPRnb(p2bigbinv, 0.0, "m*(F*s^2/g)^0.5/V", "WL-term of bigbinv")

`MPRnb(cigbinv, 6.0e-3, "/V", "Parameter for Igb in inversion")
`MPRnb(lcigbinv, 0.0, "m/V", "l-term of cigbinv")
`MPRnb(ncigbinv, 0.0, "/V", "N-term of cigbinv")
`MPRnb(pcigbinv, 0.0, "m/V", "P-term of cigbinv")
`MPRnb(wcigbinv, 0.0, "m/V", "W-term of cigbinv")
`MPRnb(p2cigbinv, 0.0, "(m^2)/V", "WL-term of cigbinv")

`MPRnb(eigbinv, 1.1, "V", "Parameter for Igb in inversion")
`MPRnb(leigbinv, 0.0, "m*V", "l-term of eigbinv")
`MPRnb(neigbinv, 0.0, "V", "N-term of eigbinv")
`MPRnb(peigbinv, 0.0, "m*V", "P-term of eigbinv")
`MPRnb(weigbinv, 0.0, "m*V", "W-term of eigbinv")
`MPRnb(p2eigbinv, 0.0, "(m^2)*V", "WL-term of eigbinv")

`MPRnb(nigbinv, 3.0, "", "Parameter for Igb in inversion")
`MPRnb(lnigbinv, 0.0, "m", "l-term of nigbinv")
`MPRnb(nnigbinv, 0.0, "", "N-term of nigbinv")
`MPRnb(pnigbinv, 0.0, "m", "P-term of nigbinv")
`MPRnb(wnigbinv, 0.0, "m", "W-term of nigbinv")
`MPRnb(p2nigbinv, 0.0, "m^2", "WL-term of nigbinv")

`MPRnb(aigbacc, 1.36e-2, "(F*s^2/g)^0.5/m", "Parameter for Igb in accumulation")
`MPRnb(laigbacc, 0.0, "(F*s^2/g)^0.5", "l-term of aigbacc")
`MPRnb(naigbacc, 0.0, "(F*s^2/g)^0.5/m", "N-term of aigbacc")
`MPRnb(paigbacc, 0.0, "(F*s^2/g)^0.5", "P-term of aigbacc")
`MPRnb(waigbacc, 0.0, "(F*s^2/g)^0.5", "W-term of aigbacc")
`MPRnb(p2aigbacc, 0.0, "m*(F*s^2/g)^0.5", "WL-term of aigbacc")

`MPRnb(aigbacc1, 0.0, "(F*s^2/g)^0.5/(m*K)", "Parameter for Igb in accumulation")
`MPRnb(laigbacc1, 0.0, "(F*s^2/g)^0.5/K", "l-term of aigbacc1")
`MPRnb(naigbacc1, 0.0, "(F*s^2/g)^0.5/(m*K)", "N-term of aigbacc1")
`MPRnb(paigbacc1, 0.0, "(F*s^2/g)^0.5/K", "P-term of aigbacc1")
`MPRnb(waigbacc1, 0.0, "(F*s^2/g)^0.5/K", "W-term of aigbacc1")
`MPRnb(p2aigbacc1, 0.0, "m*(F*s^2/g)^0.5/K", "WL-term of aigbacc1")

`MPRnb(bigbacc, 1.71e-3, "(F*s^2/g)^0.5/(m*V)", "Parameter for Igb in accumulation")
`MPRnb(lbigbacc, 0.0, "(F*s^2/g)^0.5/V", "l-term of bigbacc")
`MPRnb(nbigbacc, 0.0, "(F*s^2/g)^0.5/(m*V)", "N-term of bigbacc")
`MPRnb(pbigbacc, 0.0, "(F*s^2/g)^0.5/V", "P-term of bigbacc")
`MPRnb(wbigbacc, 0.0, "(F*s^2/g)^0.5/V", "W-term of bigbacc")
`MPRnb(p2bigbacc, 0.0, "m*(F*s^2/g)^0.5/V", "WL-term of bigbacc")

`MPRnb(cigbacc, 7.5e-2, "/V", "Parameter for Igb in accumulation")
`MPRnb(lcigbacc, 0.0, "m/V", "l-term of cigbacc")
`MPRnb(ncigbacc, 0.0, "/V", "N-term of cigbacc")
`MPRnb(pcigbacc, 0.0, "m/V", "P-term of cigbacc")
`MPRnb(wcigbacc, 0.0, "m/V", "W-term of cigbacc")
`MPRnb(p2cigbacc, 0.0, "(m^2)/V", "WL-term of cigbacc")

`MPRnb(nigbacc, 1.0, "", "Parameter for Igb in accumulation")
`MPRnb(lnigbacc, 0.0, "m", "l-term of nigbacc")
`MPRnb(nnigbacc, 0.0, "", "N-term of nigbacc")
`MPRnb(pnigbacc, 0.0, "m", "P-term of nigbacc")
`MPRnb(wnigbacc, 0.0, "m", "W-term of nigbacc")
`MPRnb(p2nigbacc, 0.0, "m^2", "WL-term of nigbacc")

`MPRnb(aigc, 1.36e-2, "(F*s^2/g)^0.5/m", "Parameter for Igc in inversion")
`MPRnb(laigc, 0.0, "(F*s^2/g)^0.5", "l-term of aigc")
`MPRnb(naigc, 0.0, "(F*s^2/g)^0.5/m", "N-term of aigc")
`MPRnb(paigc, 0.0, "(F*s^2/g)^0.5", "P-term of aigc")
`MPRnb(waigc, 0.0, "(F*s^2/g)^0.5", "W-term of aigc")
`MPRnb(p2aigc, 0.0, "m*(F*s^2/g)^0.5", "WL-term of aigc")

`MPRnb(aigc1, 0.0, "(F*s^2/g)^0.5/(m*K)", "Parameter for Igc in inversion")
`MPRnb(laigc1, 0.0, "(F*s^2/g)^0.5/K", "l-term of aigc1")
`MPRnb(naigc1, 0.0, "(F*s^2/g)^0.5/(m*K)", "N-term of aigc1")
`MPRnb(paigc1, 0.0, "(F*s^2/g)^0.5/K", "P-term of aigc1")
`MPRnb(waigc1, 0.0, "(F*s^2/g)^0.5/K", "W-term of aigc1")
`MPRnb(p2aigc1, 0.0, "m*(F*s^2/g)^0.5/K", "WL-term of aigc1")

`MPRnb(bigc, 1.71e-3, "(F*s^2/g)^0.5/(m*V)", "Parameter for Igc in inversion")
`MPRnb(lbigc, 0.0, "(F*s^2/g)^0.5/V", "l-term of bigc")
`MPRnb(nbigc, 0.0, "(F*s^2/g)^0.5/(m*V)", "N-term of bigc")
`MPRnb(pbigc, 0.0, "(F*s^2/g)^0.5/V", "P-term of bigc")
`MPRnb(wbigc, 0.0, "(F*s^2/g)^0.5/V", "W-term of bigc")
`MPRnb(p2bigc, 0.0, "m*(F*s^2/g)^0.5/V", "WL-term of bigc")

`MPRnb(cigc, 7.5e-2, "/V", "Parameter for Igc in inversion")
`MPRnb(lcigc, 0.0, "m/V", "l-term of cigc")
`MPRnb(ncigc, 0.0, "/V", "N-term of cigc")
`MPRnb(pcigc, 0.0, "m/V", "P-term of cigc")
`MPRnb(wcigc, 0.0, "m/V", "W-term of cigc")
`MPRnb(p2cigc, 0.0, "(m^2)/V", "WL-term of cigc")

`MPRnb(pigcd, 1.0, "", "Parameter for Igc partition")
`MPRnb(lpigcd, 0.0, "m", "l-term of pigcd")
`MPRnb(npigcd, 0.0, "", "N-term of pigcd")
`MPRnb(ppigcd, 0.0, "m", "P-term of pigcd")
`MPRnb(wpigcd, 0.0, "m", "W-term of pigcd")
`MPRnb(p2pigcd, 0.0, "m^2", "WL-term of pigcd")

`MPRnb(aigs, 1.36e-2, "(F*s^2/g)^0.5/m", "Parameter for Igs in inversion")
`MPRnb(laigs, 0.0, "(F*s^2/g)^0.5", "l-term of aigs")
`MPRnb(naigs, 0.0, "(F*s^2/g)^0.5/m", "N-term of aigs")
`MPRnb(paigs, 0.0, "(F*s^2/g)^0.5", "P-term of aigs")
`MPRnb(waigs, 0.0, "(F*s^2/g)^0.5", "W-term of aigs")
`MPRnb(p2aigs, 0.0, "m*(F*s^2/g)^0.5", "WL-term of aigs")

`MPRnb(aigs1, 0.0, "(F*s^2/g)^0.5/(m*K)", "Parameter for Igs in inversion")
`MPRnb(laigs1, 0.0, "(F*s^2/g)^0.5/K", "l-term of aigs1")
`MPRnb(naigs1, 0.0, "(F*s^2/g)^0.5/(m*K)", "N-term of aigs1")
`MPRnb(paigs1, 0.0, "(F*s^2/g)^0.5/K", "P-term of aigs1")
`MPRnb(waigs1, 0.0, "(F*s^2/g)^0.5/K", "W-term of aigs1")
`MPRnb(p2aigs1, 0.0, "m*(F*s^2/g)^0.5/K", "WL-term of aigs1")

`MPRnb(bigs, 1.71e-3, "(F*s^2/g)^0.5/(m*V)", "Parameter for Igs in inversion")
`MPRnb(lbigs, 0.0, "(F*s^2/g)^0.5/V", "l-term of bigs")
`MPRnb(nbigs, 0.0, "(F*s^2/g)^0.5/(m*V)", "N-term of bigs")
`MPRnb(pbigs, 0.0, "(F*s^2/g)^0.5/V", "P-term of bigs")
`MPRnb(wbigs, 0.0, "(F*s^2/g)^0.5/V", "W-term of bigs")
`MPRnb(p2bigs, 0.0, "m*(F*s^2/g)^0.5/V", "WL-term of bigs")

`MPRnb(cigs, 7.5e-2, "/V", "Parameter for Igs in inversion")
`MPRnb(lcigs, 0.0, "m/V", "l-term of cigs")
`MPRnb(ncigs, 0.0, "/V", "N-term of cigs")
`MPRnb(pcigs, 0.0, "m/V", "P-term of cigs")
`MPRnb(wcigs, 0.0, "m/V", "W-term of cigs")
`MPRnb(p2cigs, 0.0, "(m^2)/V", "WL-term of cigs")

`MPRnb(aigd, aigs, "(F*s^2/g)^0.5/m", "Parameter for Igd in inversion")
`MPRnb(laigd, laigs, "(F*s^2/g)^0.5", "l-term of aigd")
`MPRnb(naigd, naigs, "(F*s^2/g)^0.5/m", "N-term of aigd")
`MPRnb(paigd, paigs, "(F*s^2/g)^0.5", "P-term of aigd")
`MPRnb(waigd, waigs, "(F*s^2/g)^0.5", "W-term of aigd")
`MPRnb(p2aigd, p2aigs, "m*(F*s^2/g)^0.5", "WL-term of aigd")

`MPRnb(aigd1, aigs1, "(F*s^2/g)^0.5/(m*K)", "Parameter for Igd in inversion")
`MPRnb(laigd1, laigs1, "(F*s^2/g)^0.5/K", "l-term of aigd1")
`MPRnb(naigd1, naigs1, "(F*s^2/g)^0.5/(m*K)", "N-term of aigd1")
`MPRnb(paigd1, paigs1, "(F*s^2/g)^0.5/K", "P-term of aigd1")
`MPRnb(waigd1, waigs1, "(F*s^2/g)^0.5/K", "W-term of aigd1")
`MPRnb(p2aigd1, p2aigs1, "m*(F*s^2/g)^0.5/K", "WL-term of aigd1")

`MPRnb(bigd, bigs, "(F*s^2/g)^0.5/(m*V)", "Parameter for Igd in inversion")
`MPRnb(lbigd, lbigs, "(F*s^2/g)^0.5/V", "l-term of bigd")
`MPRnb(nbigd, nbigs, "(F*s^2/g)^0.5/(m*V)", "N-term of bigd")
`MPRnb(pbigd, pbigs, "(F*s^2/g)^0.5/V", "P-term of bigd")
`MPRnb(wbigd, wbigs, "(F*s^2/g)^0.5/V", "W-term of bigd")
`MPRnb(p2bigd, p2bigs, "m*(F*s^2/g)^0.5/V", "WL-term of bigd")

`MPRnb(cigd, cigs, "/V", "Parameter for Igd in inversion")
`MPRnb(lcigd, lcigs, "m/V", "l-term of cigd")
`MPRnb(ncigd, ncigs, "/V", "N-term of cigd")
`MPRnb(pcigd, pcigs, "m/V", "P-term of cigd")
`MPRnb(wcigd, wcigs, "m/V", "W-term of cigd")
`MPRnb(p2cigd, p2cigs, "(m^2)/V", "WL-term of cigd")

`MPRnb(poxedge, 1.0, "", "Factor for the gate edge Tox")
`MPRnb(lpoxedge, 0.0, "m", "l-term of poxedge")
`MPRnb(npoxedge, 0.0, "", "N-term of poxedge")
`MPRnb(ppoxedge, 0.0, "m", "P-term of poxedge")
`MPRnb(wpoxedge, 0.0, "m", "W-term of poxedge")
`MPRnb(p2poxedge, 0.0, "m^2", "WL-term of poxedge")

// GIDL, GISL currents
`MPRnb(agidl, 6.055e-12, "/ohm", "Pre-exponential coefficient for GIDL")
`MPRnb(lagidl, 0.0, "m/ohm", "l-term of agidl")
`MPRnb(nagidl, 0.0, "/ohm", "N-term of agidl")
`MPRnb(pagidl, 0.0, "m/ohm", "P-term of agidl")
`MPRnb(wagidl, 0.0, "m/ohm", "W-term of agidl")
`MPRnb(p2agidl, 0.0, "(m^2)/ohm", "WL-term of agidl")

`MPRnb(bgidl, 3.0e8, "V/m", "Exponential coefficient for GIDL")
`MPRnb(lbgidl, 0.0, "V", "l-term of bgidl")
`MPRnb(nbgidl, 0.0, "V/m", "N-term of bgidl")
`MPRnb(pbgidl, 0.0, "V", "P-term of bgidl")
`MPRnb(wbgidl, 0.0, "V", "W-term of bgidl")
`MPRnb(p2bgidl, 0.0, "m*V", "WL-term of bgidl")

`MPRnb(cgidl, 0.5, "V^3", "Parameter for body-effect of GIDL")
`MPRnb(lcgidl, 0.0, "m*(V^3)", "l-term of cgidl")
`MPRnb(ncgidl, 0.0, "V^3", "N-term of cgidl")
`MPRnb(pcgidl, 0.0, "m*(V^3)", "P-term of cgidl")
`MPRnb(wcgidl, 0.0, "m*(V^3)", "W-term of cgidl")
`MPRnb(p2cgidl, 0.0, "(m^2)*(V^3)", "WL-term of cgidl")

`MPRnb(egidl, 0.2, "V", "Band bending parameter for GIDL")
`MPRnb(legidl, 0.0, "m*V", "l-term of egidl")
`MPRnb(negidl, 0.0, "V", "N-term of egidl")
`MPRnb(pegidl, 0.0, "m*V", "P-term of egidl")
`MPRnb(wegidl, 0.0, "m*V", "W-term of egidl")
`MPRnb(p2egidl, 0.0, "(m^2)*V", "WL-term of egidl")

`MPRnb(pgidl, 1.0, "", "Parameter for body-bias effect on GIDL")
`MPRnb(lpgidl, 0.0, "m", "l-term of pgidl")
`MPRnb(npgidl, 0.0, "", "N-term of pgidl")
`MPRnb(ppgidl, 0.0, "m", "P-term of pgidl")
`MPRnb(wpgidl, 0.0, "m", "W-term of pgidl")
`MPRnb(p2pgidl, 0.0, "m^2", "WL-term of pgidl")

`MPRnb(agisl, agidl, "/ohm", "Pre-exponential coefficient for GISL")
`MPRnb(lagisl, lagidl, "m/ohm", "l-term of agisl")
`MPRnb(nagisl, nagidl, "/ohm", "N-term of agisl")
`MPRnb(pagisl, pagidl, "m/ohm", "P-term of agisl")
`MPRnb(wagisl, wagidl, "m/ohm", "W-term of agisl")
`MPRnb(p2agisl, p2agidl, "(m^2)/ohm", "WL-term of agisl")

`MPRnb(bgisl, bgidl, "V/m", "Exponential coefficient for GISL")
`MPRnb(lbgisl, lbgidl, "V", "l-term of bgisl")
`MPRnb(nbgisl, nbgidl, "V/m", "N-term of bgisl")
`MPRnb(pbgisl, pbgidl, "V", "P-term of bgisl")
`MPRnb(wbgisl, wbgidl, "V", "W-term of bgisl")
`MPRnb(p2bgisl, p2bgidl, "m*V", "WL-term of bgisl")

`MPRnb(cgisl, cgidl, "V^3", "Parameter for body-effect of GISL")
`MPRnb(lcgisl, lcgidl, "m*(V^3)", "l-term of cgisl")
`MPRnb(ncgisl, ncgidl, "V^3", "N-term of cgisl")
`MPRnb(pcgisl, pcgidl, "m*(V^3)", "P-term of cgisl")
`MPRnb(wcgisl, wcgidl, "m*(V^3)", "W-term of cgisl")
`MPRnb(p2cgisl, p2cgidl, "(m^2)*(V^3)", "WL-term of cgisl")

`MPRnb(egisl, egidl, "V", "Band bending parameter for GISL")
`MPRnb(legisl, legidl, "m*V", "l-term of egisl")
`MPRnb(negisl, negidl, "V", "N-term of egisl")
`MPRnb(pegisl, pegidl, "m*V", "P-term of egisl")
`MPRnb(wegisl, wegidl, "m*V", "W-term of egisl")
`MPRnb(p2egisl, p2egidl, "(m^2)*V", "WL-term of egisl")

`MPRnb(pgisl, pgidl, "", "Parameter for body-bias effect on GISL")
`MPRnb(lpgisl, lpgidl, "m", "l-term of pgisl")
`MPRnb(npgisl, npgidl, "", "N-term of pgisl")
`MPRnb(ppgisl, ppgidl, "m", "P-term of pgisl")
`MPRnb(wpgisl, wpgidl, "m", "W-term of pgisl")
`MPRnb(p2pgisl, p2pgidl, "m^2", "WL-term of pgisl")

// TAT GIDL, GISL currents
`MPRnb(atatd, 1.0e-27, "A*(m^2)", "Pre-exponential coefficient for TAT GIDL")
`MPRnb(latatd, 0.0, "A*(m^3)", "l-term of atatd")
`MPRnb(natatd, 0.0, "A*(m^2)", "N-term of atatd")
`MPRnb(patatd, 0.0, "A*(m^3)", "P-term of atatd")
`MPRnb(watatd, 0.0, "A*(m^3)", "W-term of atatd")
`MPRnb(p2atatd, 0.0, "A*(m^4)", "WL-term of atatd")

`MPRnb(btatd, 6.3e-5, "V^-1", "Field correction parameter for TAT GIDL")
`MPRnb(lbtatd, 0.0, "m*(V^-1)", "l-term of btatd")
`MPRnb(nbtatd, 0.0, "V^-1", "N-term of btatd")
`MPRnb(pbtatd, 0.0, "V^-1*m", "P-term of btatd")
`MPRnb(wbtatd, 0.0, "m*(V^-1)", "W-term of btatd")
`MPRnb(p2btatd, 0.0, "(m^2)*(V^-1)", "WL-term of btatd")

`MPRnb(ctatd, 0.215, "", "Field correction parameter for TAT GIDL")
`MPRnb(lctatd, 0.0, "m", "l-term of ctatd")
`MPRnb(nctatd, 0.0, "", "N-term of ctatd")
`MPRnb(pctatd, 0.0, "m", "P-term of ctatd")
`MPRnb(wctatd, 0.0, "m", "W-term of ctatd")
`MPRnb(p2ctatd, 0.0, "m^2", "WL-term of ctatd")

`MPRnb(dtatd, 0.382, "V", "Field correction parameter for TAT GIDL")
`MPRnb(ldtatd, 0.0, "m*V", "l-term of dtatd")
`MPRnb(ndtatd, 0.0, "V", "N-term of dtatd")
`MPRnb(pdtatd, 0.0, "m*V", "P-term of dtatd")
`MPRnb(wdtatd, 0.0, "m*V", "W-term of dtatd")
`MPRnb(p2dtatd, 0.0, "(m^2)*V", "WL-term of dtatd")

`MPRnb(atats, atatd, "A*(m^2)", "Pre-exponential coefficient for TAT GISL")
`MPRnb(latats, 0.0, "A*(m^3)", "l-term of atats")
`MPRnb(natats, 0.0, "A*(m^2)", "N-term of atats")
`MPRnb(patats, 0.0, "A*(m^3)", "P-term of atats")
`MPRnb(watats, 0.0, "A*(m^3)", "W-term of atats")
`MPRnb(p2atats, 0.0, "A*(m^4)", "WL-term of atats")

`MPRnb(btats, btatd, "V^-1", "Field correction parameter for TAT GISL")
`MPRnb(lbtats, 0.0, "m*(V^-1)", "l-term of btats")
`MPRnb(nbtats, 0.0, "V^-1", "N-term of btats")
`MPRnb(pbtats, 0.0, "V^-1*m", "P-term of btats")
`MPRnb(wbtats, 0.0, "m*(V^-1)", "W-term of btats")
`MPRnb(p2btats, 0.0, "(m^2)*(V^-1)", "WL-term of btats")

`MPRnb(ctats, ctatd, "", "Field correction parameter for TAT GISL")
`MPRnb(lctats, 0.0, "m", "l-term of ctats")
`MPRnb(nctats, 0.0, "", "N-term of ctats")
`MPRnb(pctats, 0.0, "m", "P-term of ctats")
`MPRnb(wctats, 0.0, "m", "W-term of ctats")
`MPRnb(p2ctats, 0.0, "m^2", "WL-term of ctats")

`MPRnb(dtats, dtatd, "V", "Field correction parameter for TAT GISL")
`MPRnb(ldtats, 0.0, "m*V", "l-term of dtats")
`MPRnb(ndtats, 0.0, "V", "N-term of dtats")
`MPRnb(pdtats, 0.0, "m*V", "P-term of dtats")
`MPRnb(wdtats, 0.0, "m*V", "W-term of dtats")
`MPRnb(p2dtats, 0.0, "(m^2)*V", "WL-term of dtats")

//Parasitic substrate GIDL, GISL currents
`MPRnb(agidlb, 6.055e-12, "/ohm", "Pre-exponential coefficient for parasitic substrate GIDL")
`MPRnb(lagidlb, 0.0, "m/ohm", "l-term of agidlb")
`MPRnb(nagidlb, 0.0, "/ohm", "N-term of agidlb")
`MPRnb(pagidlb, 0.0, "m/ohm", "P-term of agidlb")
`MPRnb(wagidlb, 0.0, "m/ohm", "W-term of agidlb")
`MPRnb(p2agidlb, 0.0, "(m^2)/ohm", "WL-term of agidlb")

`MPRnb(bgidlb, 3.0e8, "V/m", "Exponential coefficient for parasitic substrate GIDL")
`MPRnb(lbgidlb, 0.0, "V", "l-term of bgidlb")
`MPRnb(nbgidlb, 0.0, "V/m", "N-term of bgidlb")
`MPRnb(pbgidlb, 0.0, "V", "P-term of bgidlb")
`MPRnb(wbgidlb, 0.0, "V", "W-term of bgidlb")
`MPRnb(p2bgidlb, 0.0, "m*V", "WL-term of bgidlb")

`MPRnb(cgidlb, 0.5, "V^3", "Parameter for body-effect of parasitic substrate GIDL")
`MPRnb(lcgidlb, 0.0, "m*(V^3)", "l-term of cgidlb")
`MPRnb(ncgidlb, 0.0, "V^3", "N-term of cgidlb")
`MPRnb(pcgidlb, 0.0, "m*(V^3)", "P-term of cgidlb")
`MPRnb(wcgidlb, 0.0, "m*(V^3)", "W-term of cgidlb")
`MPRnb(p2cgidlb, 0.0, "(m^2)*(V^3)", "WL-term of cgidlb")

`MPRnb(egidlb, 0.2, "V", "Band bending parameter for parasitic substrate GIDL")
`MPRnb(legidlb, 0.0, "m*V", "l-term of egidlb")
`MPRnb(negidlb, 0.0, "V", "N-term of egidlb")
`MPRnb(pegidlb, 0.0, "m*V", "P-term of egidlb")
`MPRnb(wegidlb, 0.0, "m*V", "W-term of egidlb")
`MPRnb(p2egidlb, 0.0, "(m^2)*V", "WL-term of egidlb")

`MPRnb(pgidlb, 1.0, "", "Parameter for body-bias effect on parasitic substrate GIDL")
`MPRnb(lpgidlb, 0.0, "m", "l-term of pgidlb")
`MPRnb(npgidlb, 0.0, "", "N-term of pgidlb")
`MPRnb(ppgidlb, 0.0, "m", "P-term of pgidlb")
`MPRnb(wpgidlb, 0.0, "m", "W-term of pgidlb")
`MPRnb(p2pgidlb, 0.0, "m^2", "WL-term of pgidlb")

`MPRnb(agislb, agidlb, "/ohm", "Pre-exponential coefficient for parasitic substrate GISL")
`MPRnb(lagislb, lagidlb, "m/ohm", "l-term of agislb")
`MPRnb(nagislb, nagidlb, "/ohm", "N-term of agislb")
`MPRnb(pagislb, pagidlb, "m/ohm", "P-term of agislb")
`MPRnb(wagislb, wagidlb, "m/ohm", "W-term of agislb")
`MPRnb(p2agislb, p2agidlb, "(m^2)/ohm", "WL-term of agislb")

`MPRnb(bgislb, bgidlb, "V/m", "Exponential coefficient for parasitic substrate GISL")
`MPRnb(lbgislb, lbgidlb, "V", "l-term of bgislb")
`MPRnb(nbgislb, nbgidlb, "V/m", "N-term of bgislb")
`MPRnb(pbgislb, pbgidlb, "V", "P-term of bgislb")
`MPRnb(wbgislb, wbgidlb, "V", "W-term of bgislb")
`MPRnb(p2bgislb, p2bgidlb, "m*V", "WL-term of bgislb")

`MPRnb(cgislb, cgidlb, "V^3", "Parameter for body-effect of parasitic substrate GISL")
`MPRnb(lcgislb, lcgidlb, "m*(V^3)", "l-term of cgislb")
`MPRnb(ncgislb, ncgidlb, "V^3", "N-term of cgislb")
`MPRnb(pcgislb, pcgidlb, "m*(V^3)", "P-term of cgislb")
`MPRnb(wcgislb, wcgidlb, "m*(V^3)", "W-term of cgislb")
`MPRnb(p2cgislb, p2cgidlb, "(m^2)*(V^3)", "WL-term of cgislb")

`MPRnb(egislb, egidlb, "V", "Band bending parameter for parasitic substrate GISL")
`MPRnb(legislb, legidlb, "m*V", "l-term of egislb")
`MPRnb(negislb, negidlb, "V", "N-term of egislb")
`MPRnb(pegislb, pegidlb, "m*V", "P-term of egislb")
`MPRnb(wegislb, wegidlb, "m*V", "W-term of egislb")
`MPRnb(p2egislb, p2egidlb, "(m^2)*V", "WL-term of egislb")

`MPRnb(pgislb, pgidlb, "", "Parameter for body-bias effect on parasitic substrate GISL")
`MPRnb(lpgislb, lpgidlb, "m", "l-term of pgislb")
`MPRnb(npgislb, npgidlb, "", "N-term of pgislb")
`MPRnb(ppgislb, ppgidlb, "m", "P-term of pgislb")
`MPRnb(wpgislb, wpgidlb, "m", "W-term of pgislb")
`MPRnb(p2pgislb, p2pgidlb, "m^2", "WL-term of pgislb")

// Impact ionization current
`MPRnb(alpha01, 0.0, "m/(V*K)", "Temperature dependence of alpha0")
`MPRnb(alpha11, 0.0, "/(V*K)", "Temperature dependence alpha1")
`MPRnb(alphaii01, 0.0, "m/(V*K)", "Temperature dependence of alphaii0")
`MPRnb(alphaii11, 0.0, "m/(V*K)", "Temperature dependence of alphaii1")
`MPRoz(iimod2clamp1, 0.1, "V", "Clamp1 of sii1 * Vg term in iimod = 2")
`MPRoz(iimod2clamp2, 0.1, "V", "Clamp2 of sii0 * Vg term in iimod = 2")
`MPRoz(iimod2clamp3, 0.1, "m*V", "Clamp3 of ratio term in iimod = 2")

`MPRnb(alpha0, 0.0, "m/V", "First parameter of Iii")
`MPRnb(lalpha0, 0.0, "m^2/V", "l-term of alpha0")
`MPRnb(nalpha0, 0.0, "m/V", "N-term of alpha0")
`MPRnb(palpha0, 0.0, "m^2/V", "P-term of alpha0")
`MPRnb(walpha0, 0.0, "m^2/V", "W-term of alpha0")
`MPRnb(p2alpha0, 0.0, "m^3/V", "WL-term of alpha0")

`MPRnb(alpha1, 0.0, "/V", "l scaling parameter of Iii")
`MPRnb(lalpha1, 0.0, "m/V", "l-term of alpha1")
`MPRnb(nalpha1, 0.0, "/V", "N-term of alpha1")
`MPRnb(palpha1, 0.0, "m/V", "P-term of alpha1")
`MPRnb(walpha1, 0.0, "m/V", "W-term of alpha1")
`MPRnb(p2alpha1, 0.0, "(m^2)/V", "WL-term of alpha1")

`MPRnb(beta0, 0.0, "/V", "Vds dependence parameter of Iii")
`MPRnb(lbeta0, 0.0, "m/V", "l-term of beta0")
`MPRnb(nbeta0, 0.0, "/V", "N-term of beta0")
`MPRnb(pbeta0, 0.0, "m/V", "P-term of beta0")
`MPRnb(wbeta0, 0.0, "m/V", "W-term of beta0")
`MPRnb(p2beta0, 0.0, "m^2/V", "WL-term of beta0")

`MPRnb(alphaii0, 0.0, "m/V", "First parameter of Iii for iimod = 2")
`MPRnb(lalphaii0, 0.0, "(m^2)/V", "l-term of alphaii0")
`MPRnb(nalphaii0, 0.0, "m/V", "N-term of alphaii0")
`MPRnb(palphaii0, 0.0, "(m^2)/V", "P-term of alphaii0")
`MPRnb(walphaii0, 0.0, "(m^2)/V", "W-term of alphaii0")
`MPRnb(p2alphaii0, 0.0, "(m^3)/V", "WL-term of alphaii0")

`MPRnb(alphaii1, 0.0, "/V", "l scaling parameter of Iii for iimod = 2")
`MPRnb(lalphaii1, 0.0, "m/V", "l-term of alphaii1")
`MPRnb(nalphaii1, 0.0, "/V", "N-term of alphaii1")
`MPRnb(palphaii1, 0.0, "m/V", "P-term of alphaii1")
`MPRnb(walphaii1, 0.0, "m/V", "W-term of alphaii1")
`MPRnb(p2alphaii1, 0.0, "(m^2)/V", "WL-term of alphaii1")

`MPRnb(betaii0, 0.0, "/V", "Vds dependence parameter of Iii")
`MPRnb(lbetaii0, 0.0, "m/V", "l-term of betaii0")
`MPRnb(nbetaii0, 0.0, "/V", "N-term of betaii0")
`MPRnb(pbetaii0, 0.0, "m/V", "P-term of betaii0")
`MPRnb(wbetaii0, 0.0, "m/V", "W-term of betaii0")
`MPRnb(p2betaii0, 0.0, "(m^2)/V", "WL-term of betaii0")

`MPRnb(betaii1, 0.0, "", "Vds dependence parameter of Iii")
`MPRnb(lbetaii1, 0.0, "m", "l-term of betaii1")
`MPRnb(nbetaii1, 0.0, "", "N-term of betaii1")
`MPRnb(pbetaii1, 0.0, "m", "P-term of betaii1")
`MPRnb(wbetaii1, 0.0, "m", "W-term of betaii1")
`MPRnb(p2betaii1, 0.0, "m^2", "WL-term of betaii1")

`MPRnb(betaii2, 0.1, "V", "Vds dependence parameter of Iii")
`MPRnb(lbetaii2, 0.0, "m*V", "l-term of betaii2")
`MPRnb(nbetaii2, 0.0, "V", "N-term of betaii2")
`MPRnb(pbetaii2, 0.0, "m*V", "P-term of betaii2")
`MPRnb(wbetaii2, 0.0, "m*V", "W-term of betaii2")
`MPRnb(p2betaii2, 0.0, "(m^2)*V", "WL-term of betaii2")

`MPRnb(esatii, 1.0e7, "V/m", "Saturation channel E-field for Iii")
`MPRnb(lesatii, 0.0, "V", "l-term of esatii")
`MPRnb(nesatii, 0.0, "V/m", "N-term of esatii")
`MPRnb(pesatii, 0.0, "V", "P-term of esatii")
`MPRnb(wesatii, 0.0, "V", "W-term of esatii")
`MPRnb(p2esatii, 0.0, "m*V", "WL-term of esatii")

`MPRnb(lii, 0.5e-9, "m*V", "Channel length dependence parameter of Iii")
`MPRnb(llii, 0.0, "m^2*V", "l-term of lii")
`MPRnb(nlii, 0.0, "m*V", "N-term of lii")
`MPRnb(plii, 0.0, "m^2*V", "P-term of lii")
`MPRnb(wlii, 0.0, "m^2*V", "W-term of lii")
`MPRnb(p2lii, 0.0, "(m^3)*V", "WL-term of lii")

`MPRnb(sii0, 0.5, "/V", "Vgs dependence parameter of Iii")
`MPRnb(lsii0, 0.0, "m/V", "l-term of sii0")
`MPRnb(nsii0, 0.0, "/V", "N-term of sii0")
`MPRnb(psii0, 0.0, "m/V", "P-term of sii0")
`MPRnb(wsii0, 0.0, "m/V", "W-term of sii0")
`MPRnb(p2sii0, 0.0, "(m^2)/V", "WL-term of sii0")

`MPRnb(sii1, 0.1, "", "1st Vgs dependence parameter of Iii")
`MPRnb(lsii1, 0.0, "m", "l-term of sii1")
`MPRnb(nsii1, 0.0, "", "N-term of sii1")
`MPRnb(psii1, 0.0, "m", "P-term of sii1")
`MPRnb(wsii1, 0.0, "m", "W-term of sii1")
`MPRnb(p2sii1, 0.0, "m^2", "WL-term of sii1")

`MPRnb(sii2, 0.0, "V", "2nd Vgs dependence parameter of Iii")
`MPRnb(lsii2, 0.0, "m*V", "l-term of sii2")
`MPRnb(nsii2, 0.0, "V", "N-term of sii2")
`MPRnb(psii2, 0.0, "m*V", "P-term of sii2")
`MPRnb(wsii2, 0.0, "m*V", "W-term of sii2")
`MPRnb(p2sii2, 0.0, "(m^2)*V", "WL-term of sii2")

`MPRnb(siid, 0.0, "V", "3rd Vds dependence parameter of Iii")
`MPRnb(lsiid, 0.0, "m*V", "l-term of siid")
`MPRnb(nsiid, 0.0, "V", "N-term of siid")
`MPRnb(psiid, 0.0, "m*V", "P-term of siid")
`MPRnb(wsiid, 0.0, "m*V", "W-term of siid")
`MPRnb(p2siid, 0.0, "(m^2)*V", "WL-term of siid")

// Accumulation capacitance
`MPRco(eotacc, eot, "m", 1.0e-10, inf, "Equivalent oxide thickness for accumulation region")
`MPRnb(delvfbacc, 0.0, "V", "Change in flatband voltage: Vfb_accumulation - Vfb_inversion")

// Fringe capacitance
`MPRnb(cfs, 2.5e-11, "F/m", "Outer fringe capacitance at source side")
`MPRnb(lcfs, 0.0, "F", "l-term of cfs")
`MPRnb(ncfs, 0.0, "F/m", "N-term of cfs")
`MPRnb(pcfs, 0.0, "F", "P-term of cfs")
`MPRnb(wcfs, 0.0, "F", "W-term of cfs")
`MPRnb(p2cfs, 0.0, "F*m", "WL-term of cfs")

`MPRnb(cfd, cfs, "F/m", "Outer fringe capacitance at drain side")
`MPRnb(lcfd, lcfs, "F", "l-term of cfd")
`MPRnb(ncfd, ncfs, "F/m", "N-term of cfd")
`MPRnb(pcfd, pcfs, "F", "P-term of cfd")
`MPRnb(wcfd, wcfs, "F", "W-term of cfd")
`MPRnb(p2cfd, p2cfs, "F*m", "WL-term of cfd")

// Overlap capacitance
`MPRcz(cgso, 0.0, "F/m", "User-designated non-LDD region source-gate overlap capacitance per unit channel width")
`MPRcz(cgdo, cgso, "F/m", "User-designated non-LDD region drain-gate overlap capacitance per unit channel width")
`MPRcz(cgbo, 0.0, "F/m", "Gate-to-substrate overlap capacitance per unit channel length per finger per ngcon")
`MPRcz(cgbn, 0.0, "F/m", "Gate-to-substrate overlap capacitance per unit channel length per fin per finger")
`MPRcz(cgbw, 0.0, "F/m^2", "GAA gate-to-substrate overlap capacitance per unit area per fin per finger")

`MPRnb(cgsl, 0.0, "F/m", "Overlap capacitance between gate and lightly-doped source region (cgeomod = 0, 2, 3)")
`MPRnb(lcgsl, 0.0, "F", "l-term of cgsl")
`MPRnb(ncgsl, 0.0, "F/m", "N-term of cgsl")
`MPRnb(pcgsl, 0.0, "F", "P-term of cgsl")
`MPRnb(wcgsl, 0.0, "F", "W-term of cgsl")
`MPRnb(p2cgsl, 0.0, "F*m", "WL-term of cgsl")

`MPRnb(cgdl, cgsl, "F/m", "Overlap capacitance between gate and lightly-doped drain region (cgeomod = 0, 2, 3)")
`MPRnb(lcgdl, lcgsl, "F", "l-term of cgdl")
`MPRnb(ncgdl, ncgsl, "F/m", "N-term of cgdl")
`MPRnb(pcgdl, pcgsl, "F", "P-term of cgdl")
`MPRnb(wcgdl, wcgsl, "F", "W-term of cgdl")
`MPRnb(p2cgdl, p2cgsl, "F*m", "WL-term of cgdl")

`MPRnb(cgbl, 0.0, "F/m", "Bias-dependent component of gate-to-substrate overlap capacitance per unit channel length per fin per finger")
`MPRnb(lcgbl, 0.0, "F", "l-term of cgbl")
`MPRnb(ncgbl, 0.0, "F/m", "N-term of cgbl")
`MPRnb(pcgbl, 0.0, "F", "P-term of cgbl")
`MPRnb(wcgbl, 0.0, "F", "W-term of cgbl")
`MPRnb(p2cgbl, 0.0, "F*m", "WL-term of cgbl")

`MPRnb(ckappas, 0.6, "V", "Coefficient of bias-dependent overlap capacitance for the source side (cgeomod = 0, 2, 3)")
`MPRnb(lckappas, 0.0, "m*V", "l-term of ckappas")
`MPRnb(nckappas, 0.0, "V", "N-term of ckappas")
`MPRnb(pckappas, 0.0, "m*V", "P-term of ckappas")
`MPRnb(wckappas, 0.0, "m*V", "W-term of ckappas")
`MPRnb(p2ckappas, 0.0, "(m^2)*V", "WL-term of ckappas")

`MPRnb(ckappad, ckappas, "V", "Coefficient of bias-dependent overlap capacitance for the drain side (cgeomod = 0, 2, 3)")
`MPRnb(lckappad, lckappas, "m*V", "l-term of ckappad")
`MPRnb(nckappad, nckappas, "V", "N-term of ckappad")
`MPRnb(pckappad, pckappas, "m*V", "P-term of ckappad")
`MPRnb(wckappad, wckappas, "m*V", "W-term of ckappad")
`MPRnb(p2ckappad, p2ckappas, "(m^2)*V", "WL-term of ckappad")

`MPRnb(ckappab, 0.6, "V", "Bias-dependent gate-to-substrate parasitic capacitance")
`MPRnb(lckappab, 0.0, "m*V", "l-term of ckappab")
`MPRnb(nckappab, 0.0, "V", "N-term of ckappab")
`MPRnb(pckappab, 0.0, "m*V", "P-term of ckappab")
`MPRnb(wckappab, 0.0, "m*V", "W-term of ckappab")
`MPRnb(p2ckappab, 0.0, "(m^2)*V", "WL-term of ckappab")

// Source/drain-to-substrate sidewall capacitance
`MPRcz(csdesw, 0.0, "F/m", "Coefficient for source/drain-to-substrate sidewall capacitance")

// Junction capacitance
`MPRcz(cjs, 5.0e-4, "F/m^2", "Unit area source-side junction capacitance at zero bias")
`MPRcz(cjd, cjs, "F/m^2", "Unit area drain-side junction capacitance at zero bias")
`MPRcz(cjsws, 5.0e-10, "F/m", "Unit length source-side sidewall junction capacitance at zero bias")
`MPRcz(cjswd, cjsws, "F/m", "Unit length drain-side sidewall junction capacitance at zero bias")
`MPRcz(cjswgs, 0.0, "F/m", "Unit length source-side gate sidewall junction capacitance at zero bias")
`MPRcz(cjswgd, cjswgs, "F/m", "Unit length drain-side gate sidewall junction capacitance at zero bias")
`MPRnb(pbs, 1.0, "V", "Source-side bulk junction built-in potential")
`MPRnb(pbd, pbs, "V", "Drain-side bulk junction built-in potential")
`MPRnb(pbsws, 1.0, "V", "Built-in potential for Source-side sidewall junction capacitance")
`MPRnb(pbswd, pbsws, "V", "Built-in potential for Drain-side sidewall junction capacitance")
`MPRnb(pbswgs, pbsws, "V", "Built-in potential for Source-side gate sidewall junction capacitance")
`MPRnb(pbswgd, pbswgs, "V", "Built-in potential for Drain-side gate sidewall junction capacitance")
`MPRoz(mjs, 0.5, "", "Source bottom junction capacitance grading coefficient")
`MPRoz(mjd, mjs, "", "Drain bottom junction capacitance grading coefficient")
`MPRoz(mjsws, 0.33, "", "Source sidewall junction capacitance grading coefficient")
`MPRoz(mjswd, mjsws, "", "Drain sidewall junction capacitance grading coefficient")
`MPRoz(mjswgs, mjsws, "", "Source-side gate sidewall junction capacitance grading coefficient")
`MPRoz(mjswgd, mjswgs, "", "Drain-side gate sidewall junction capacitance grading coefficient")

// Second junction for two-step junction capacitance
`MPRcz(sjs, 0.0, "", "Constant for source-side two-step second junction")
`MPRcz(sjd, sjs, "", "Constant for drain-side two-step second junction")
`MPRcz(sjsws, 0.0, "", "Constant for source-side sidewall two-step second junction")
`MPRcz(sjswd, sjsws, "", "Constant for drain-side sidewall two-step second junction")
`MPRcz(sjswgs, 0.0, "", "Constant for source-side gate sidewall two-step second junction")
`MPRcz(sjswgd, sjswgs, "", "Constant for source-side gate sidewall two-step second junction")
`MPRnb(mjs2, 1.25e-1, "", "Source bottom two-step second junction capacitance grading coefficient")
`MPRnb(mjd2, mjs2, "", "Drain bottom two-step second junction capacitance grading coefficient")
`MPRnb(mjsws2, 8.3e-2, "", "Source sidewall two-step second junction capacitance grading coefficient")
`MPRnb(mjswd2, mjsws2, "", "Drain sidewall two-step second junction capacitance grading coefficient")
`MPRnb(mjswgs2, mjsws2, "", "Source-side gate sidewall two-step second junction capacitance grading coefficient")
`MPRnb(mjswgd2, mjswgs2, "", "Drain-side gate sidewall two-step second junction capacitance grading coefficient")

// Junction current
`MPRcz(jss, 1.0e-4, "A/m^2", "Bottom source junction reverse saturation current density")
`MPRcz(jsd, jss, "A/m^2", "Bottom drain junction reverse saturation current density")
`MPRcz(jsws, 0.0, "A/m", "Unit length reverse saturation current for sidewall source junction")
`MPRcz(jswd, jsws, "A/m", "Unit length reverse saturation current for sidewall drain junction")
`MPRcz(jswgs, 0.0, "A/m", "Unit length reverse saturation current for gate-edge sidewall source junction")
`MPRcz(jswgd, jswgs, "A/m", "Unit length reverse saturation current for gate-edge sidewall drain junction")
`MPRoz(njs, 1.0, "", "Source junction emission coefficient")
`MPRoz(njd, njs, "", "Drain junction emission coefficient")
`MPRnb(ijthsfwd, 0.1, "A", "Forward source diode breakdown limiting current")
`MPRnb(ijthdfwd, ijthsfwd, "A", "Forward drain diode breakdown limiting current")
`MPRnb(ijthsrev, 0.1, "A", "Reverse source diode breakdown limiting current")
`MPRnb(ijthdrev, ijthsrev, "A", "Reverse drain diode breakdown limiting current")
`MPRnb(bvs, 1.0e1, "V", "Source diode breakdown voltage")
`MPRnb(bvd, bvs, "V", "Drain diode breakdown voltage")
`MPRex(xjbvs, 1.0, "", 0.0, "Fitting parameter for source diode breakdown current")
`MPRex(xjbvd, xjbvs, "", 0.0, "Fitting parameter for drain diode breakdown current")

// Tunneling component of junction current
`MPRnb(jtss, 0.0, "A/m^2", "Bottom source junction trap-assisted saturation current density")
`MPRnb(jtsd, jtss, "A/m^2", "Bottom drain junction trap-assisted saturation current density")
`MPRnb(jtssws, 0.0, "A/m", "Unit length trap-assisted saturation current for sidewall source junction")
`MPRnb(jtsswd, jtssws, "A/m", "Unit length trap-assisted saturation current for sidewall drain junction")
`MPRnb(jtsswgs, 0.0, "A/m", "Unit length trap-assisted saturation current for gate-edge sidewall source junction")
`MPRnb(jtsswgd, jtsswgs, "A/m", "Unit length trap-assisted saturation current for gate-edge sidewall drain junction")
`MPRcz(jtweff, 0.0, "m", "Trap-assisted tunneling current width dependence")
`MPRnb(njts, 2.0e1, "", "Non-ideality factor for jtss")
`MPRnb(njtsd, njts, "", "Non-ideality factor for jtsd")
`MPRnb(njtssw, 2.0e1, "", "Non-ideality factor for jtssws")
`MPRnb(njtsswd, njtssw, "", "Non-ideality factor for jtsswd")
`MPRnb(njtsswg, 2.0e1, "", "Non-ideality factor for jtsswgs")
`MPRnb(njtsswgd, njtsswg, "", "Non-ideality factor for jtsswgd")
`MPRnb(vtss, 1.0e1, "V", "Bottom source junction trap-assisted current voltage dependent parameter")
`MPRnb(vtsd, vtss, "V", "Bottom drain junction trap-assisted current voltage dependent parameter")
`MPRnb(vtssws, 1.0e1, "V", "Unit length trap-assisted current voltage dependent parameter for sidewall source junction")
`MPRnb(vtsswd, vtssws, "V", "Unit length trap-assisted current voltage dependent parameter for sidewall drain junction")
`MPRnb(vtsswgs, 1.0e1, "V", "Unit length trap-assisted current voltage dependent parameter for gate-edge sidewall source junction")
`MPRnb(vtsswgd, vtsswgs, "V", "Unit length trap-assisted current voltage dependent parameter for gate-edge sidewall drain junction")

// Recombination-generation current
`MPRnb(lintigen, 0.0, "m", "Lint for thermal generation current")

`MPRnb(ntgen, 1.0, "", "Thermal generation current parameter")
`MPRnb(lntgen, 0.0, "m", "l-term of ntgen")
`MPRnb(nntgen, 0.0, "", "N-term of ntgen")
`MPRnb(pntgen, 0.0, "m", "P-term of ntgen")
`MPRnb(wntgen, 0.0, "m", "W-term of ntgen")
`MPRnb(p2ntgen, 0.0, "m^2", "WL-term of ntgen")

`MPRnb(aigen, 0.0, "/(m^3*V)", "Thermal generation current parameter")
`MPRnb(laigen, 0.0, "/(m^2*V)", "l-term of aigen")
`MPRnb(naigen, 0.0, "/(m^3*V)", "N-term of aigen")
`MPRnb(paigen, 0.0, "/(m^2*V)", "P-term of aigen")
`MPRnb(waigen, 0.0, "/(m^2*V)", "W-term of aigen")
`MPRnb(p2aigen, 0.0, "/(m^1*V)", "WL-term of aigen")

`MPRnb(bigen, 0.0, "m^2/(m^3*V^3)", "Thermal generation current parameter")
`MPRnb(lbigen, 0.0, "m^2/(m^2*V^3)", "l-term of bigen")
`MPRnb(nbigen, 0.0, "m^2/(m^3*V^3)", "N-term of bigen")
`MPRnb(pbigen, 0.0, "m^2/(m^2*V^3)", "P-term of bigen")
`MPRnb(wbigen, 0.0, "m^2/(m^2*V^3)", "W-term of bigen")
`MPRnb(p2bigen, 0.0, "m^2/(m^1*V^3)", "WL-term of bigen")

// NQS gate resistance model & charge deficit model
`MPRnb(xrcrg1, 12.0, "", "Parameter for non-quasistatic gate resistance nqsmod = 1, 2")
`MPRnb(lxrcrg1, 0.0, "m", "l-term of xrcrg1")
`MPRnb(nxrcrg1, 0.0, "", "N-term of xrcrg1")
`MPRnb(pxrcrg1, 0.0, "m", "P-term of xrcrg1")
`MPRnb(wxrcrg1, 0.0, "m", "W-term of xrcrg1")
`MPRnb(p2xrcrg1, 0.0, "m^2", "WL-term of xrcrg1")

`MPRnb(xrcrg2, 1.0, "", "Parameter for non-quasistatic gate resistance nqsmod = 1, 2")
`MPRnb(lxrcrg2, 0.0, "m", "l-term of xrcrg2")
`MPRnb(nxrcrg2, 0.0, "", "N-term of xrcrg2")
`MPRnb(pxrcrg2, 0.0, "m", "P-term of xrcrg2")
`MPRnb(wxrcrg2, 0.0, "m", "W-term of xrcrg2")
`MPRnb(p2xrcrg2, 0.0, "m^2", "WL-term of xrcrg2")

// Flicker noise
`MPRcz(ef, 1.0, "", "Flicker noise frequency exponent")
`MPRcz(em, 4.1e7, "V/m", "Flicker noise parameter")
`MPRoz(noia, 6.25e39, "s^(1-ef)/(eV*m^3)", "Flicker noise parameter")
`MPRcz(noib, 3.125e24, "s^(1-ef)/(eV*m)", "Flicker noise parameter")
`MPRcz(noic, 8.75e7, "m*s^(1-ef)/eV", "Flicker noise parameter")
`MPRnb(lintnoi, 0.0, "m", "l offset for flicker noise calculation")
`MPRcz(smooth, 2, "", "Smoothing Parameter")

`MPRcz(noia2, noia, "s^(1-ef)/(eV*m^3)", "Flicker noise parameter for sub-threshold region")
`MPRcz(lnoia2, 0.0, "s^(1-ef)/(eV*m^2)", "l-term for noia2")
`MPRcz(nnoia2, 0.0, "s^(1-ef)/(eV*m^3)", "N-term for noia2")
`MPRcz(pnoia2, 0.0, "s^(1-ef)/(eV*m^2)", "P-term for noia2")
`MPRcz(wnoia2, 0.0, "s^(1-ef)/(eV*m^2)", "W-term for noia2")
`MPRcz(p2noia2, 0.0, "s^(1-ef)/(eV*m)", "WL-term for noia2")

`MPRcz(mpower, 1.2, "", "Sub-threshold to strong inversion transition slope Parameter")
`MPRcz(lmpower, 0.0, "m" ,"l-term for mpower")
`MPRcz(nmpower, 0.0, "" ,"N-term for mpower")
`MPRcz(pmpower, 0.0, "m" ,"P-term for mpower")
`MPRcz(wmpower, 0.0, "m", "W-term for mpower")
`MPRcz(p2mpower, 0.0, "m^2", "WL-term for mpower")

`MPRcz(qsref, 50m, "", "Charge at threshold condition")
`MPRcz(lqsref, 0.0, "m", "l-term for qsref")
`MPRcz(nqsref, 0.0, "", "N-term for qsref")
`MPRcz(pqsref, 0.0, "m", "P-term for qsref")
`MPRcz(wqsref, 0.0, "m", "W-term for qsref")
`MPRcz(p2qsref, 0.0, "m^2", "WL-term for qsref")

// Thermal noise
`MPRcz(ntnoi, 1.0, "", "Thermal noise parameter")

// Correlated thermal noise
`MPRcz(rnoia, 0.5774, "", "Empirical parameter for Sid level")
`MPRnb(tnoia, 0.0, "/m", "Empirical parameter for Leff trend of Sid")
`MPRcz(rnoib, 0.3652, "", "Empirical parameter for Sig level")
`MPRnb(tnoib, 0.0, "/m", "Empirical parameter for Leff trend of Sig")
`MPRcz(rnoic, 0.3953, "", "Empirical parameter for correlation coefficient")
`MPRnb(tnoic, 0.0, "/m", "Empirical parameter for Leff trend of correlation coefficient")
`MPRcz(rnoik, 0.0, "", "Empirical parameter for Sid level at low Ids")
`MPRnb(tnoik, 0.0, "/m", "Empirical parameter for Leff trend of Sid at low Ids")
`MPRcz(tnoik2, 0.1, "", "Empirical parameter for sensitivity of rnoik")

// Temperature effects
`MPRco(tnom, 27.0, "degC", -`P_CELSIUS0, inf, "Temperature at which the model is extracted")
`MPRnb(tbgasub, 7.02e-4, "eV/K", "Bandgap temperature coefficient")
`MPRnb(tbgbsub, 1.108e3, "K", "Bandgap temperature coefficient")
`MPRnb(kt1l, 0.0, "V*m", "Vth temperature l coefficient")
`MPRnb(tcj, 0.0, "/K", "Temperature coefficient for cjs/cjd")
`MPRnb(tcjsw, 0.0, "/K", "Temperature coefficient for cjsws/cjswd")
`MPRnb(tcjswg, 0.0, "/K", "Temperature coefficient for cjswgs/cjswgd")
`MPRnb(tpb, 0.0, "/K", "Temperature coefficient for pbs/pbd")
`MPRnb(tpbsw, 0.0, "/K", "Temperature coefficient for pbsws/pbswd")
`MPRnb(tpbswg, 0.0, "/K", "Temperature coefficient for pbswgs/pbswgd")
`MPRnb(xtis, 3.0, "", "Source junction current temperature exponent")
`MPRnb(xtid, xtis, "", "Drain junction current temperature exponent")
`MPRnb(xtss, 2.0e-2, "", "Power dependence of jtss on temperature")
`MPRnb(xtsd, xtss, "", "Power dependence of jtsd on temperature")
`MPRnb(xtssws, 2.0e-2, "", "Power dependence of jtssws on temperature")
`MPRnb(xtsswd, xtssws, "", "Power dependence of jtsswd on temperature")
`MPRnb(xtsswgs, 2.0e-2, "", "Power dependence of jtsswgs on temperature")
`MPRnb(xtsswgd, xtsswgs, "", "Power dependence of jtsswgd on temperature")
`MPRnb(tnjts, 0.0, "", "Temperature coefficient for njts")
`MPRnb(tnjtsd, tnjts, "", "Temperature coefficient for njtsd")
`MPRnb(tnjtssw, 0.0, "", "Temperature coefficient for njtssw")
`MPRnb(tnjtsswd, tnjtssw, "", "Temperature coefficient for njtsswd")
`MPRnb(tnjtsswg, 0.0, "", "Temperature coefficient for njtsswg")
`MPRnb(tnjtsswgd, tnjtsswg, "", "Temperature coefficient for njtsswgd")

`MPRnb(kt1, 0.0, "V", "Vth temperature coefficient")
`MPRnb(lkt1, 0.0, "m*V", "l-term of kt1")
`MPRnb(nkt1, 0.0, "V", "N-term of kt1")
`MPRnb(pkt1, 0.0, "m*V", "P-term of kt1")
`MPRnb(wkt1, 0.0, "m*V", "W-term of kt1")
`MPRnb(p2kt1, 0.0, "(m^2)*V", "WL-term of kt1")
`MPRnb(kt11, 0.01, "V", "cryomod != 0 Vth temperature coefficient")
`MPRnb(kt12, 0.1, "/K", "cryomod != 0 Vth temperature coefficient")
`MPRnb(tvth, 40.0, "K", "cryomod != 0 transition temperature for Vth temperature model")

`MPRnb(tss, 0.0, "/K", "Swing temperature coefficient")
`MPRnb(ltss, 0.0, "m/K", "l-term of tss")
`MPRnb(ntss, 0.0, "/K", "N-term of tss")
`MPRnb(ptss, 0.0, "m/K", "P-term of tss")
`MPRnb(wtss, 0.0, "m/K", "W-term of tss")
`MPRnb(p2tss, 0.0, "(m^2)/K", "WL-term of tss")

`MPRnb(iit, -0.5, "", "Impact ionization temperature dependence for iimod = 1")
`MPRnb(liit, 0.0, "m", "l-term of iit")
`MPRnb(niit, 0.0, "", "N-term of iit")
`MPRnb(piit, 0.0, "m", "P-term of iit")
`MPRnb(wiit, 0.0, "m", "W-term of iit")
`MPRnb(p2iit, 0.0, "m^2", "WL-term of iit")

`MPRnb(tii, 0.0, "", "Impact ionization temperature dependence for iimod = 2")
`MPRnb(ltii, 0.0, "m", "l-term of tii")
`MPRnb(ntii, 0.0, "", "N-term of tii")
`MPRnb(ptii, 0.0, "m", "P-term of tii")
`MPRnb(wtii, 0.0, "m", "W-term of tii")
`MPRnb(p2tii, 0.0, "m^2", "WL-term of tii")

`MPRnb(tgidl, -3.0e-3, "/K", "GIDL/GISL temperature dependence")
`MPRnb(ltgidl, 0.0, "m/K", "l-term of tgidl")
`MPRnb(ntgidl, 0.0, "/K", "N-term of tgidl")
`MPRnb(ptgidl, 0.0, "m/K", "P-term of tgidl")
`MPRnb(wtgidl, 0.0, "m/K", "W-term of tgidl")
`MPRnb(p2tgidl, 0.0, "(m^2)/K", "WL-term of tgidl")

`MPRnb(ttat, -1e-6, "/K", "GIDL/GISL temperature dependence")
`MPRnb(lttat, 0.0, "m/K", "l-term of tgidl")
`MPRnb(nttat, 0.0, "/K", "N-term of tgidl")
`MPRnb(pttat, 0.0, "m/K", "P-term of tgidl")
`MPRnb(wttat, 0.0, "m/K", "W-term of tgidl")
`MPRnb(p2ttat, 0.0, "(m^2)/K", "WL-term of tgidl")

`MPRnb(igt, 2.5, "", "Gate current temperature dependence")
`MPRnb(ligt, 0.0, "m", "l-term of igt")
`MPRnb(nigt, 0.0, "", "N-term of igt")
`MPRnb(pigt, 0.0, "m", "P-term of igt")
`MPRnb(wigt, 0.0, "m", "W-term of igt")
`MPRnb(p2igt, 0.0, "m^2", "WL-term of igt")

// Effective temperature
`MPRcz(tlow, 50.0, "K", "cryomod != 0 transition temperature of subthreshold swing at low temperatures")
`MPRcz(tlow1, 0.0, "K", "cryomod != 0 transition temperature of subthreshold swing at low temperatures")
`MPRoz(dtlow, 1.0, "K", "cryomod != 0 smoothing parameter for tlow")
`MPRoz(dtlow1, 1.0e-3, "K", "cryomod != 0 smoothing parameter for tlow1")
`MPRcz(klow1, 0.0, "", "cryomod != 0 slope magnitude of effective temperature below tlow1")

// Self-heating
`MPRcz(rth0, 1.0e-2, "ohm*m*K/W", "Thermal resistance")
`MPRcz(cth0, 1.0e-5, "W*s/(m*K)", "Thermal capacitance")
`MPRcz(wth0, 0.0, "m", "Width dependence coefficient for Rth and Cth")
`MPRcz(ashexp, 1.0, "", "Exponent to tune RTH dependence of NFINTOTAL")
`MPRcz(bshexp, 1.0, "", "Exponent to tune RTH dependence of nf")
`MPRcz(cshexp, 1.0, "", "Exponent to tune RTH dependence of ngaa")
`MPRcz(ash, 1.0, "", "Coefficient to tune RTH dependence of NFINTOTAL")
`MPRcz(csh, 1.0, "", "Coefficient to tune RTH dependence of ngaa")

// Unified model
`MPRoz(ach_ufcm, 1.0, "m^2", "Area of the channel for the unified model")
`MPRoz(cins_ufcm, 1.0, "F/m", "Insulator capacitance for the unified model")
`MPRoz(w_ufcm, 1.0, "m", "Effective channel width for the unified model")
`MPRcz(tfin_top, 0.0, "m", "If non-zero, top fin thickness for trapezoidal triple gate")
`MPRcz(tfin_base, 0.0, "m", "If non-zero, base fin thickness for trapezoidal triple gate")
`MPRcz(qmfactorcv, 0.0, "", "Charge dependence taking QM effects into account")
`MPRcz(alpha_ufcm, 0.5556, "", "Mobile charge scaling term taking QM effects into account")

// Gate-All-Around subband model
`MPRcc(dim1h, 3,"", 1, 3, "Max dimension for 1st subband (real number enables optimization)")

`MPRcc(dimension1, 2, "", 1, 3, "Dimension for 1st subband (real number enables optimization)")
`MPRnb(ldimension1, 0.0, "m", "l-term of dimension1")
`MPRnb(ndimension1, 0.0, "", "N-term of dimension1")
`MPRnb(pdimension1, 0.0, "m", "P-term of dimension1")
`MPRnb(wdimension1, 0.0, "m", "W-term of dimension1")
`MPRnb(p2dimension1, 0.0, "m^2", "WL-term of dimension1")

`MPRcc(dim2h, 3, "", 1, 3, "Max dimension for 2nd subband (real number enables optimization)")

`MPRcc(dimension2, 2.6, "", 1, 3, "Dimension for 2nd subband (real number enables optimization)")
`MPRnb(ldimension2, 0.0, "m", "l-term of dimension2")
`MPRnb(ndimension2, 0.0, "", "N-term of dimension2")
`MPRnb(pdimension2, 0.0, "m", "P-term of dimension2")
`MPRnb(wdimension2, 0.0, "m", "W-term of dimension2")
`MPRnb(p2dimension2, 0.0, "m^2", "WL-term of dimension2")

`MPRcc(dim3h, 3, "", 1, 3, "Max dimension for 3rd subband (real number enables optimization)")

`MPRcc(dimension3, 2.6, "", 1, 3, "Dimension for 3rd subband (real number enables optimization)")
`MPRnb(ldimension3, 0.0, "m", "l-term of dimension3")
`MPRnb(ndimension3, 0.0, "", "N-term of dimension3")
`MPRnb(pdimension3, 0.0, "m", "P-term of dimension3")
`MPRnb(wdimension3, 0.0, "m", "W-term of dimension3")
`MPRnb(p2dimension3, 0.0, "m^2", "WL-term of dimension3")

`MPRcz(wdim0, 9.5e-9, "m", "wgaa at which dimension change happens")
`MPRoz(wdimr, 0.1, "nm", "Rate of dimension change with wgaa scaling")

`MPRcz(ssp1, 14, "", "Subband smoothing parameter for 1st subband (wgaa<wssp0)")
`MPRnb(lssp1, 0.0, "m", "l-term of ssp1")
`MPRnb(nssp1, 0.0, "", "N-term of ssp1")
`MPRnb(pssp1, 0.0, "m", "P-term of ssp1")
`MPRnb(wssp1, 0.0, "m", "W-term of ssp1")
`MPRnb(p2ssp1, 0.0, "m^2", "WL-term of ssp1")

`MPRcz(ssp2, 24, "", "Subband smoothing parameter for 2nd subband (wgaa<wssp0)")
`MPRnb(lssp2, 0.0, "m", "l-term of ssp2")
`MPRnb(nssp2, 0.0, "", "N-term of ssp2")
`MPRnb(pssp2, 0.0, "m", "P-term of ssp2")
`MPRnb(wssp2, 0.0, "m", "W-term of ssp2")
`MPRnb(p2ssp2, 0.0, "m^2", "WL-term of ssp2")

`MPRcz(ssp3, 24, "", "Subband smoothing parameter for 3rd subband (wgaa<wssp0)")
`MPRnb(lssp3, 0.0, "m", "l-term of ssp3")
`MPRnb(nssp3, 0.0, "", "N-term of ssp3")
`MPRnb(pssp3, 0.0, "m", "P-term of ssp3")
`MPRnb(wssp3, 0.0, "m", "W-term of ssp3")
`MPRnb(p2ssp3, 0.0, "m^2", "WL-term of ssp3")

`MPRcz(dssp1, 2, "", "Change in ssp1 with wgaa scaling for large wgaa>wssp0")
`MPRcz(dssp2, 0,"m", "Change in ssp2 with wgaa scaling for large wgaa>wssp0")
`MPRcz(dssp3, 0,"", "Change in SPP3 with wgaa scaling for large wgaa>wssp0")
`MPRcz(wssp0, wdim0, "m", "wgaa around which SSP change happens")
`MPRoz(wsspr, wdimr, "nm", "Rate of SSP change with wgaa scaling")
`MPRoz(wgaanom, 8e-9, "m^2", "Nominal wgaa")

`MPRcz(e2nom, 0.139, "eV", "2nd subband energy for nominal wgaa")
`MPRnb(le2nom, 0.0, "m*eV", "l-term of e2nom")
`MPRnb(ne2nom, 0.0, "eV", "N-term of e2nom")
`MPRnb(pe2nom, 0.0, "m*eV", "P-term of e2nom")
`MPRnb(we2nom, 0.0, "m*eV", "W-term of e2nom")
`MPRnb(p2e2nom, 0.0, "(m^2)*eV", "WL-term of e2nom")

`MPRcz(e3nom, 2, "eV", "3rd subband energy for nominal wgaa")
`MPRnb(le3nom, 0.0, "m*eV", "l-term of e3nom")
`MPRnb(ne3nom, 0.0, "eV", "N-term of e3nom")
`MPRnb(pe3nom, 0.0, "m*eV", "P-term of e3nom")
`MPRnb(we3nom, 0.0, "m*eV", "W-term of e3nom")
`MPRnb(p2e3nom, 0.0, "(m^2)*eV", "WL-term of e3nom")

`MPRnb(mfe2, 1, "", "Rate of change in 2nd subband energy with wgaa and tgaa scaling")
`MPRnb(mfe3, 1, "", "Rate of change in 3rd subband energy with wgaa and tgaa scaling")
`MPRcz(wsfe2, 1, "", "wgaa scaling factor for 2nd subband energy")
`MPRcz(wsfe3, 1, "", "wgaa scaling factor for 3rd subband energy")

`MPRcz(mfq1nom, 11.2, "", "Sacling factor for 1st subband charge for nominal wgaa")
`MPRnb(lmfq1nom, 0.0, "m", "l-term of mfq1nom")
`MPRnb(nmfq1nom, 0.0, "", "N-term of mfq1nom")
`MPRnb(pmfq1nom, 0.0, "m", "P-term of mfq1nom")
`MPRnb(wmfq1nom, 0.0, "m", "W-term of mfq1nom")
`MPRnb(p2mfq1nom, 0.0, "m^2", "WL-term of mfq1nom")

`MPRcz(mfq2nom, 8.02, "", "Scaling factor for 2nd subband charge for nominal wgaa")
`MPRnb(lmfq2nom, 0.0, "m", "l-term of mfq2nom")
`MPRnb(nmfq2nom, 0.0, "", "N-term of mfq2nom")
`MPRnb(pmfq2nom, 0.0, "m", "P-term of mfq2nom")
`MPRnb(wmfq2nom, 0.0, "m", "W-term of mfq2nom")
`MPRnb(p2mfq2nom, 0.0, "m^2", "WL-term of mfq2nom")

`MPRcz(mfq3nom, 6.18,"","Scaling factor for 3rd subband charge for niminal WHSEET")
`MPRnb(lmfq3nom, 0.0, "m", "l-term of mfq3nom")
`MPRnb(nmfq3nom, 0.0, "", "N-term of mfq3nom")
`MPRnb(pmfq3nom, 0.0, "m", "P-term of mfq3nom")
`MPRnb(wmfq3nom, 0.0, "m", "W-term of mfq3nom")
`MPRnb(p2mfq3nom, 0.0, "m^2", "WL-term of mfq3nom")

`MPRnb(mfq1, 1, "", "Rate of change in 1st subband charge with wgaa and tgaa scaling")
`MPRnb(mfq2, 1, "", "Rate of change in 2nd subband charge with wgaa and tgaa scaling")
`MPRnb(mfq3, 1, "", "Rate of change in 3rd subband charge with wgaa and tgaa scaling")
`MPRcz(wsfq1, 1, "", "wgaa scaling factor for 1st subband charge")
`MPRcz(wsfq2, 1, "", "wgaa scaling factor for 2nd subband charge")
`MPRcz(wsfq3, 1, "", "wgaa scaling factor for 3rd subband charge")
`MPRcz(tsre2, 1.8, "", "tgaa scaling for 2nd subband energy")
`MPRcz(tdwse2, 1.0, "", "tgaa dependence of wgaa scaling for 2nd subband energy")
`MPRnb(tsre3, 0.67, "", "tgaa scaling for 3rd subband energy")
`MPRnb(tdwse3, 0.23, "", "tgaa dependence of wgaa scaling for 3rd subband energy")
`MPRcz(tsrq1, 1.1, "", "tgaa scaling for 1st subband charge")
`MPRcz(tdwsq1, 2.4, "", "tgaa dependence of wgaa scaling for 1st subband charge")
`MPRcz(tsrq2, 2.0, "", "tgaa scaling for 2nd subband charge")
`MPRcz(tdwsq2, 2.0, "", "tgaa dependence of wgaa scaling for 2nd subband charge")
`MPRnb(tsrq3, 6.0, "", "tgaa scaling for 3rd subband charge")
`MPRnb(tdwsq3, 2.4, "", "tgaa dependence of wgaa scaling for 3rd subband charge")

// S/D Velocity Saturation Model
`MPRoz(nvsrd, 5.0e16, "1/m^2", "Charge density in the drain region")
`MPRoz(vsatrsd, 1.0e5, "m/sec", "Saturation velocity in S/D region")
`MPRcz(ptwgvsrsd, 0.0, "1/V", "vsatrsd variation with gate bias")
`MPRnb(ptwg1vsrsd, 0.0, "V", "vsatrsd variation with gate bias")
`MPRoz(psatxvsrsd, 60.0, "V", "Fine tuning of ptwgvsrsd effect")
`MPRoo(mvsrsd, 1.0, "", 0, 4, "Non-linear resistance parameter")
`MPRoz(nvsrs, nvsrd, "1/m^2", "Charge density in the source region")
`MPRcz(rdlcw, 0.0, "Ohm*um^wr", "'R'esistance of the 'D'rain region at 'l'ow 'C'urrent")
`MPRcz(rslcw, 0.0, "Ohm*um^wr", "'R'esistance of the 'S'ource region at 'l'ow 'C'urrent")
`MPRnb(prtvsrsd, 0.0, "", "Temperature coefficient of resistance in S/D velocity saturation model")
`MPRnb(atvsrsd, 0.0, "m/s", "Temperature coefficient for S/D region saturation velocity")
`MPRcc(vsrdfactor, 1.0e-3, "", 1.0e-4, 1.0, "Parameter for delta_vsrd tuning")
`MPRcc(vsrsfactor, 1.0e-3, "", 1.0e-4, 1.0, "Parameter for delta_vsrs tuning")
`MPRnb(rdvds, 8.0, "V", "Parameter for Isat_rd variation with drain voltage")
`MPRcz(gavsrd, 0.0, "1/V", "Parameter for Isat_rd variation with drain voltage")

// Operating-point information
`OPP(weff, "m", "Effective width for I-V")
`OPP(leff, "m", "Effective length for I-V")
`OPP(weffcv, "m", "Effective width for C-V")
`OPP(leffcv, "m", "Effective length for C-V")
`OPM(ids, "A", "Intrinsic drain current")
`OPM(ideff, "A", "Total drain current")
`OPM(iseff, "A", "Total source current")
`OPM(igtot, "A", "Total gate current")
`OPM(idsgen, "A", "Generation-recombination current")
`OPM(iii, "A", "Impact ionization current")
`OPM(igidl, "A", "GIDL current")
`OPM(igisl, "A", "GISL current")
`OPM(ijsb, "A", "Source-to-substrate junction current")
`OPM(ijdb, "A", "Drain-to-substrate junction current")
`OPM(isub, "A", "Substrate current")
`OPM(beta, "A/V^2", "Drain current prefactor per fin per finger")
`OPP(vdssat, "V", "Drain-to-source saturation voltage")
`OPP(vdseff, "V", "Effective drain-to-source voltage")
`OPP(vfb, "V", "Flatband voltage")
`OPP(vth, "V", "Threshold voltage")
`OPM(gm, "A/V", "Transconductance")
`OPM(gds, "A/V", "Output conductance")
`OPM(gmbs, "A/V", "Substrate conductance")
`OPM(qgi, "C", "Intrinsic gate charge")
`OPM(qdi, "C", "Intrinsic drain charge")
`OPM(qsi, "C", "Intrinsic source charge")
`OPM(qbi, "C", "Intrinsic substrate charge")
`OPM(qg, "C", "Total gate charge")
`OPM(qd, "C", "Total drain charge")
`OPM(qs, "C", "Total source charge")
`OPM(qb, "C", "Total substrate charge")
`OPM(cggi, "F", "Intrinsic gate capacitance")
`OPM(cgsi, "F", "Intrinsic gate-to-source capacitance")
`OPM(cgdi, "F", "Intrinsic gate-to-drain capacitance")
`OPM(cgei, "F", "Intrinsic gate-to-substrate capacitance")
`OPM(cdgi, "F", "Intrinsic drain-to-gate capacitance")
`OPM(cddi, "F", "Intrinsic drain capacitance")
`OPM(cdsi, "F", "Intrinsic drain-to-source capacitance")
`OPM(cdei, "F", "Intrinsic drain-to-substrate capacitance")
`OPM(csgi, "F", "Intrinsic source-to-gate capacitance")
`OPM(csdi, "F", "Intrinsic source-to-drain capacitance")
`OPM(cssi, "F", "Intrinsic source capacitance")
`OPM(csei, "F", "Intrinsic source-to-substrate capacitance")
`OPM(cegi, "F", "Intrinsic substrate-to-gate capacitance")
`OPM(cedi, "F", "Intrinsic substrate-to-drain capacitance")
`OPM(cesi, "F", "Intrinsic substrate-to-source capacitance")
`OPM(ceei, "F", "Intrinsic substrate capacitance")
`OPM(cgg, "F", "Total gate capacitance")
`OPM(cgs, "F", "Total gate-to-source capacitance")
`OPM(cgd, "F", "Total gate-to-drain capacitance")
`OPM(cge, "F", "Total gate-to-substrate capacitance")
`OPM(cdg, "F", "Total drain-to-gate capacitance")
`OPM(cdd, "F", "Total drain capacitance")
`OPM(cds, "F", "Total drain-to-source capacitance")
`OPM(cde, "F", "Total drain-to-substrate capacitance")
`OPM(csg, "F", "Total source-to-gate capacitance")
`OPM(csd, "F", "Total source-to-drain capacitance")
`OPM(css, "F", "Total source capacitance")
`OPM(cse, "F", "Total source-to-substrate capacitance")
`OPM(ceg, "F", "Total substrate-to-gate capacitance")
`OPM(ced, "F", "Total substrate-to-drain capacitance")
`OPM(ces, "F", "Total substrate-to-source capacitance")
`OPM(cee, "F", "Total substrate capacitance")
`OPM(cgsext, "F", "External gate-to-source capacitance")
`OPM(cgdext, "F", "External gate-to-drain capacitance")
`OPM(cgbov, "F", "Gate-to-substrate overlap capacitance")
`OPM(cjst, "F", "Total junction and source-to-substrate capacitance")
`OPM(cjdt, "F", "Total junction and drain-to-substrate capacitance")
`OPD(rsgeo, "Ohm", "External bias-independent source resistance")
`OPD(rdgeo, "Ohm", "External bias-independent drain resistance")
`OPM(cfgeo, "F", "Geometric parasitic capacitance")
`OPP(t_total_k, "K", "Device temperature in Kelvin")
`OPP(t_total_c, "degC", "Device temperature in Celsius")
`OPP(t_delta_sh, "K or degC", "Delta temperature by self-heating")
`OPM(igs, "A", "Gate-to-source tunneling current")
`OPM(igd, "A", "Gate-to-drain tunneling current")
`OPM(igcs, "A", "Gate-to-channel tunneling current at source")
`OPM(igcd, "A", "Gate-to-channel tunneling current at drain")
`OPM(igbs, "A", "Gate-to-substrate tunneling current at source")
`OPM(igbd, "A", "Gate-to-substrate tunneling current at drain")
`OPM(igbacc, "A", "Gate-to-substrate tunneling current in accumulation")
`OPM(igbinv, "A", "Gate-to-substrate tunneling current in inversion")
`OPM(didsdvg, "A/V", "dIds / dVg")
`OPM(didsdvs, "A/V", "dIds / dVs")
`OPM(didsdvd, "A/V", "dIds / dVd")
`OPM(digsdvg, "A/V", "dIgs / dVg")
`OPM(digsdvs, "A/V", "dIgs / dVs")
`OPM(digsdvd, "A/V", "dIgs / dVd")
`OPM(digddvg, "A/V", "dIgd / dVg")
`OPM(digddvs, "A/V", "dIgd / dVs")
`OPM(digddvd, "A/V", "dIgd / dVd")
`OPM(diiidvg, "A/V", "dIii / dVg")
`OPM(diiidvs, "A/V", "dIii / dVs")
`OPM(diiidvd, "A/V", "dIii / dVd")
`OPM(digidldvg, "A/V", "dIgidl / dVg")
`OPM(digidldvs, "A/V", "dIgidl / dVs")
`OPM(digidldvd, "A/V", "dIgidl / dVd")
`OPM(digisldvg, "A/V", "dIgisl / dVg")
`OPM(digisldvs, "A/V", "dIgisl / dVs")
`OPM(digisldvd, "A/V", "dIgisl / dVd")
`OPM(cgt, "C/K", "dQg / dTemp")
`OPM(cst, "C/K", "dQs / dTemp")
`OPM(cdt, "C/K", "dQd / dTemp")
`OPM(didsdvth, "A/K", "dIds / dTemp")
`OPM(digsdvth, "A/K", "dIgs / dTemp")
`OPM(digddvth, "A/K", "dIgd / dTemp")
`OPM(diiidvth, "A/K", "dIii / dTemp")
`OPM(digidldvth, "A/K", "dIgidl / dTemp")
`OPM(digisldvth, "A/K", "dIgisl / dTemp")
`OPM(ith, "A*V", "Device power")
`OPM(dithdvth, "A*V/K", "dPower / dTemp")
`OPM(dithdvg, "A", "dPower / dVg")
`OPM(dithdvs, "A", "dPower / dVs")
`OPM(dithdvd, "A", "dPower / dVd")
